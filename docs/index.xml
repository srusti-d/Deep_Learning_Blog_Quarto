<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>GPT in Genomics</title>
<link>https://www.srustillmblog.io/index.html</link>
<atom:link href="https://www.srustillmblog.io/index.xml" rel="self" type="application/rss+xml"/>
<description>A Blog Navigating my LLM Project</description>
<generator>quarto-1.3.433</generator>
<lastBuildDate>Mon, 27 Nov 2023 06:00:00 GMT</lastBuildDate>
<item>
  <title>How to Use Polaris</title>
  <dc:creator>Srusti </dc:creator>
  <link>https://www.srustillmblog.io/posts/polaris-tutorial/polaris-tutorial.html</link>
  <description><![CDATA[ 




<p>Polaris is a high performance compute system at the Argonne Leadership Computing Facility (ALCF). This post will explain how to use polaris.</p>
<section id="getting-started-on-polaris" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-on-polaris">Getting Started on Polaris</h2>
<p>First, make sure your ALCF user account and mobile token account has been created, and that you have followed the steps outlined in the ALCF user set-up email (including downloading MobilePASS+ to get the tokens).</p>
<section id="to-log-in-to-polaris-navigate-to-the-terminal-and-type" class="level3">
<h3 class="anchored" data-anchor-id="to-log-in-to-polaris-navigate-to-the-terminal-and-type">To log in to polaris, navigate to the terminal and type:</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>@polaris.alcf.anl.gov</span></code></pre></div>
<p>Then, type in the password from your CRYPTOCard/MobilePASS+ token. Each time you login to polaris, you will be given a new password.</p>
</section>
<section id="first-time-in-the-login-node" class="level3">
<h3 class="anchored" data-anchor-id="first-time-in-the-login-node">First time in the login node</h3>
<p>After you login to polaris using the ssh method above, you will be given a notice to users and prompted to type a password, which will be the password in MobilePASS+. Once you are in the login node, you should see something like this in your terminal:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">user@polaris-login-02:~</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>You can run applications on the login node, but most of your work should be run on compute nodes by submitting interactive jobs (which we will cover later).</p>
<p>Once in login node, load conda and create a virtual environment.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">module</span> load conda/2023-10-04 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#updated conda version</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate base</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create venvs directory under ~ for now, </span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#later we'll use /grand/project/TFXcan or something like this</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> venvs/polaris/2023-10-04</span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv venvs/polaris/2023-10-04 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--system-site-packages</span></span></code></pre></div>
<p>Next code chunk will activate the environment you just created and install pip.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> venvs/polaris/2023-10-04/bin/activate</span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip setuptools wheel</span></code></pre></div>
<p>Now, you are free to be able to use pip to install packages as needed into an isolated environment. Example, installing numpy package:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> pip install wandb numpy</span></code></pre></div>
</section>
</section>
<section id="submitting-and-using-a-compute-node" class="level2">
<h2 class="anchored" data-anchor-id="submitting-and-using-a-compute-node">Submitting and using a compute node</h2>
<p>Most work should be done on the compute node (an interactive job). After logging in to the login node, request a compute node by running the following:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qsub</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-I</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> AIHPC4EDU <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> walltime=1:00:00 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> filesystems=home:grand <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-q</span> debug</span></code></pre></div>
<p>Above command will give you an interactive job for 1 hour. Shorter interactive jobs are more likely to be approved, so you will get them faster. However, to get more than just one hour in the job, you can use the “preemptable” queue instead of “debug” and adjust the walltime as desired. For example, getting an 8 hour node:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">qsub</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-I</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> AIHPC4EDU <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> walltime=08:00:00 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> filesystems=home:grand <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-q</span> preemptable</span></code></pre></div>
<p>If you are waiting for a while to get the compute node, you may want to check the number of free (available) nodes in polaris:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pbsnodes</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-avjS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> free <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span></span></code></pre></div>
<p>You can also check out this cool web-based visualization of free nodes <a href="https://status.alcf.anl.gov/#/polaris">here</a>.</p>
<p>Once you get a compute node, your terminal will look something like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">user@x3006c0s25b1n0:~</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Table from ALCF; five production queues you can target in your qsub (-q <queue name="">):</queue></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.srustillmblog.io/posts/polaris-tutorial/fivequeues.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Five Production Queues</figcaption>
</figure>
</div>
<section id="activate-the-environments-in-the-compute-node." class="level3">
<h3 class="anchored" data-anchor-id="activate-the-environments-in-the-compute-node.">Activate the environments in the compute node.</h3>
<p>Activate the base conda and activate your virtual environment where you installed your packages. <strong>You need to do this every time you start a compute node or login to the login node where you are working.</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">module</span> load conda/2023-10-04</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate base</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> venvs/polaris/2023-10-04/bin/activate</span></code></pre></div>
</section>
<section id="how-to-start-a-jupyter-notebook-server-in-the-compute-node" class="level3">
<h3 class="anchored" data-anchor-id="how-to-start-a-jupyter-notebook-server-in-the-compute-node">How to start a Jupyter Notebook server in the compute node</h3>
<p>First, get your ip address.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">my_ip_address</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip</span> rule <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-w</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0:'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">awk</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{print $3;exit}'</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$my_ip_address</span> jupyter-notebook <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-browser</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--ip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$my_ip_address</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--port</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>15005</span></code></pre></div>
<p>Then:</p>
<p>Open a notebook in VSCode from the remote explorer (file with .ipynb extension).</p>
<p>Select a new kernel by clicking on the upper right side of VsCode (for me, it said “Python 3 (ipykernel)”, but yours might say “Select Kernel” or something else)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.srustillmblog.io/posts/polaris-tutorial/jupyterstepone.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Select New Kernel</figcaption>
</figure>
</div>
<p>A drop-down will pop up at the top of your screen: click on “Select another kernel”</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.srustillmblog.io/posts/polaris-tutorial/jupytersteptwo.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Select Another Kernel</figcaption>
</figure>
</div>
<p>Select “Existing jupyter server”</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.srustillmblog.io/posts/polaris-tutorial/jupyterstepthree.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Existing Jupyter Server</figcaption>
</figure>
</div>
<p>Select the jupyter sever with the same ip as my_ip_address returned from the code above</p>
<p>If you find the jupyter notebook server with your ip address, choose that. If not, type in the one of the 2 urls shown when starting the jupyter notebook from the GPU (remote) server. The URL will look something like this:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>http://10.201.1.207:15005/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span>token=c4bf05355a75efcf99eca814a774432b78432cffe1eb1403<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Now, the jupyter notebook on VSCode should be running from polaris’s GPU compute node.</p>
</section>
</section>
<section id="storing-datafiles-on-login-node" class="level2">
<h2 class="anchored" data-anchor-id="storing-datafiles-on-login-node">Storing Data/Files on Login Node</h2>
<p>To store data and other files on the login node without taking space in home, navigate to the following:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/grand/TFXcan/imlab/users/</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</section>
<section id="possible-issues" class="level2">
<h2 class="anchored" data-anchor-id="possible-issues">Possible Issues</h2>
<section id="if-you-cant-find-your-ip-address-when-trying-to-select-jupyter-server" class="level3">
<h3 class="anchored" data-anchor-id="if-you-cant-find-your-ip-address-when-trying-to-select-jupyter-server">If you can’t find your IP address when trying to select Jupyter Server</h3>
<p>When starting the jupyter server, you should see something like this, where there are two URLs provided. Try the method above where you copy-paste one of the URLs into the drop-down at the top of screen, where it says “Enter a Remote URL”. If one URL does not work, try using the other URL.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.srustillmblog.io/posts/polaris-tutorial/jupyterstepfour.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Use a Remote URL</figcaption>
</figure>
</div>
<p>If it still doesn’t work, see below.</p>
</section>
<section id="may-need-to-register-your-jupyter-kernel-on-your-local-computer-to-use-it-on-vscode" class="level3">
<h3 class="anchored" data-anchor-id="may-need-to-register-your-jupyter-kernel-on-your-local-computer-to-use-it-on-vscode">May need to register your Jupyter Kernel on your local computer to use it on VSCode</h3>
<p>On polaris, after running:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">my_ip_address</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip</span> rule <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-w</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0:'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">awk</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{print $3;exit}'</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>Try the following:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$my_ip_address</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then you can start the jupyter notebook normally</span></span>
<span id="cb15-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jupyter-notebook</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-browser</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--ip</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$my_ip_address</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--port</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>15005</span></code></pre></div>
<p>Next, copy-paste your ip address in the following command, along with the port number:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-N</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-L</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ip address<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> youruser@polaris.alcf.anl.gov</span></code></pre></div>
<p>Repeat the steps for connecting to the Jupyter Server:</p>
<ul>
<li><p>A drop-down will pop up at the top of your screen: click on “Select another kernel”</p></li>
<li><p>Select “Existing jupyter server”</p></li>
<li><p>Select the jupyter sever with the same ip as my_ip_address returned from the code above</p></li>
</ul>


</section>
</section>

 ]]></description>
  <guid>https://www.srustillmblog.io/posts/polaris-tutorial/polaris-tutorial.html</guid>
  <pubDate>Mon, 27 Nov 2023 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Polaris Test Post</title>
  <dc:creator>Srusti </dc:creator>
  <link>https://www.srustillmblog.io/posts/polaris-test/polaris_test.html</link>
  <description><![CDATA[ 




<p>polaris test text</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#polaris test code</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb1-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>test
test
test
test
test
test
test
test
test
test</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://www.srustillmblog.io/posts/polaris-test/polaris_test.html</guid>
  <pubDate>Sun, 26 Nov 2023 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Enformer Histone Modifications Prediction Project</title>
  <dc:creator>Srusti </dc:creator>
  <link>https://www.srustillmblog.io/posts/2023-07-19-katenproj/enf_proj_partone.html</link>
  <description><![CDATA[ 




<p>This is a very unrefined first draft of my project code, just for future reference.</p>
<section id="background-aims" class="level2">
<h2 class="anchored" data-anchor-id="background-aims">Background &amp; Aims</h2>
<p>Go to GeneCards for specific gene of interest (use version 19 for now, which is under “Previous Assembly”).</p>
<p>https://www.genecards.org/cgi-bin/carddisp.pl?gene=GSDMB#:~:text=GeneCards%20Summary%20for%20GSDMB%20Gene,of%20this%20gene%20is%20GSDMA. Not the best way to do this, but it works for now.</p>
<p>From GeneCards, look like this is the location: chr17:38,060,848-38,074,888</p>
<p>Look at enformer.usage Jupyter notebook for the prediction and visualization of these areas.</p>
<p><strong><em>Katen Project Goal:</em></strong></p>
<p>Examine the activity of histone modifications: - across various tissues and cell lines - across different forms of histone modification - in 17q locus of asthma (most significant locus of asthma)</p>
<p><strong><em>Longer-Term Goal:</em></strong> Train genetic predictors of histone modifications - can be combined with GWAS of asthma to identify loci where histone modification may play a role in asthma etiology</p>
<p>“The 17q21 asthma susceptibility locus is located between 35.0 and 35.5 Mb on chromosome 17 and contains at least 15 genes. To date, however, asthma-associated SNPs have been associated with the expression of only four of these genes: (i) Ikaros zinc finger protein 3 (IKZF3), involved with the regulation of lymphocyte development; (ii) Gasdermin B (GSDMB), implicated in epithelial cell barrier function; (iii) Mediator of RNA polymerase II transcription subunit 24 (MED24), a component of a transcriptional coactivator complex thought to be required for expression of most genes; and (4) ORMDL3, an endoplasmic reticulum (ER) transmembrane protein involved in regulation of sphingolipid metabolism.” Source: https://www.nature.com/articles/pr2013186</p>
<p>Relevant genes in the 17q21 locus: IKZF3, GSDMB, MED24, ORMDL3. Center at GSDMB.</p>
<p><strong><em>Human Targets (trained ENFORMER):</em></strong></p>
<p>https://raw.githubusercontent.com/calico/basenji/master/manuscripts/cross2020/targets_human.txt</p>
<ol type="1">
<li>get locus center (17q)</li>
<li>extract the DNA sequence from the reference genome (part of the enformer function in the hackathon creates the genome sequence) at that locus</li>
<li>call enformer (should be just a function) and provide DNA sequence</li>
</ol>
<ul>
<li>may want to use parsl to speed up process</li>
</ul>
<ol start="4" type="1">
<li>save the output in a variable which is 5313 x 896</li>
<li>plot matrix</li>
<li>read the human_target.txt or .csv</li>
<li>analyze the data from the matrix for indices (columns) at H3K27Ac</li>
</ol>
<ul>
<li>e.g.&nbsp;like how the hackathon extracts only column 5110</li>
<li>all histone modification data will be ChIP-seq and will start with H</li>
<li>H3K27ac is a marker for active enhancers and a great indicator of enhancer activity</li>
<li>after enformer outputs the data, it should be just the columns corresponding to the histone modifications</li>
</ul>
<ol start="8" type="1">
<li>plot H3K27Ac in LCL and in other cell types (which are in the targets file)</li>
<li>principal component analysis</li>
</ol>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>Import necessary packages.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hub <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for interacting with saved models and tensorflow hub</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for manipulating compressed files</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for manipulating fasta files</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kipoiseq <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Interval <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same as above, really</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyfaidx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to index our reference genome file</span></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for manipulating dataframes</span></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for numerical computations</span></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for saving large objects</span></span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os, sys <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># functions for interacting with the operating system</span></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneHotEncoder</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'retina'</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2023-07-20 15:36:24.257845: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE3 SSE4.1 SSE4.2 AVX AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.</code></pre>
</div>
</div>
<p>Changed the original code from !pip to %pip because only &amp;pip allows us to import packages into the correct location (including tensorflow, which was the specific package that wasn’t importing here).</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tensorflow import</span></span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install tensorflow </span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install tensorflow_hub</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: tensorflow in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (2.11.0)
Requirement already satisfied: h5py&gt;=2.9.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (3.8.0)
Requirement already satisfied: setuptools in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (65.6.3)
Requirement already satisfied: typing-extensions&gt;=3.6.6 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (4.4.0)
Requirement already satisfied: packaging in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (21.3)
Requirement already satisfied: astunparse&gt;=1.6.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (1.6.3)
Requirement already satisfied: google-pasta&gt;=0.1.1 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (0.2.0)
Requirement already satisfied: gast&lt;=0.4.0,&gt;=0.2.1 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (0.4.0)
Requirement already satisfied: tensorflow-io-gcs-filesystem&gt;=0.23.1 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (0.30.0)
Requirement already satisfied: termcolor&gt;=1.1.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (2.2.0)
Requirement already satisfied: numpy&gt;=1.20 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (1.23.5)
Requirement already satisfied: flatbuffers&gt;=2.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (2.0.7)
Requirement already satisfied: six&gt;=1.12.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (1.16.0)
Requirement already satisfied: opt-einsum&gt;=2.3.2 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (3.3.0)
Requirement already satisfied: grpcio&lt;2.0,&gt;=1.24.3 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (1.51.1)
Requirement already satisfied: absl-py&gt;=1.0.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (1.4.0)
Requirement already satisfied: keras&lt;2.12,&gt;=2.11.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (2.11.0)
Requirement already satisfied: wrapt&gt;=1.11.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (1.14.1)
Requirement already satisfied: protobuf&lt;3.20,&gt;=3.9.2 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (3.19.6)
Requirement already satisfied: tensorflow-estimator&lt;2.12,&gt;=2.11.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (2.11.0)
Requirement already satisfied: libclang&gt;=13.0.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (15.0.6.1)
Requirement already satisfied: tensorboard&lt;2.12,&gt;=2.11 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow) (2.11.2)
Requirement already satisfied: wheel&lt;1.0,&gt;=0.23.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from astunparse&gt;=1.6.0-&gt;tensorflow) (0.38.4)
Requirement already satisfied: mpi4py&gt;=3.1.1 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from h5py&gt;=2.9.0-&gt;tensorflow) (3.1.4)
Requirement already satisfied: werkzeug&gt;=1.0.1 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (2.2.2)
Requirement already satisfied: google-auth&lt;3,&gt;=1.6.3 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (2.16.0)
Requirement already satisfied: requests&lt;3,&gt;=2.21.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (2.28.1)
Requirement already satisfied: markdown&gt;=2.6.8 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (3.4.1)
Requirement already satisfied: tensorboard-data-server&lt;0.7.0,&gt;=0.6.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (0.6.1)
Requirement already satisfied: tensorboard-plugin-wit&gt;=1.6.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (1.8.1)
Requirement already satisfied: google-auth-oauthlib&lt;0.5,&gt;=0.4.1 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (0.4.6)
Requirement already satisfied: pyparsing!=3.0.5,&gt;=2.0.2 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from packaging-&gt;tensorflow) (3.0.9)
Requirement already satisfied: cachetools&lt;6.0,&gt;=2.0.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from google-auth&lt;3,&gt;=1.6.3-&gt;tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (5.3.0)
Requirement already satisfied: rsa&lt;5,&gt;=3.1.4 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from google-auth&lt;3,&gt;=1.6.3-&gt;tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (4.9)
Requirement already satisfied: pyasn1-modules&gt;=0.2.1 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from google-auth&lt;3,&gt;=1.6.3-&gt;tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (0.2.8)
Requirement already satisfied: requests-oauthlib&gt;=0.7.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from google-auth-oauthlib&lt;0.5,&gt;=0.4.1-&gt;tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (1.3.1)
Requirement already satisfied: certifi&gt;=2017.4.17 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from requests&lt;3,&gt;=2.21.0-&gt;tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (2022.12.7)
Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from requests&lt;3,&gt;=2.21.0-&gt;tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (1.26.13)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from requests&lt;3,&gt;=2.21.0-&gt;tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (3.4)
Requirement already satisfied: charset-normalizer&lt;3,&gt;=2 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from requests&lt;3,&gt;=2.21.0-&gt;tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (2.0.4)
Requirement already satisfied: MarkupSafe&gt;=2.1.1 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from werkzeug&gt;=1.0.1-&gt;tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (2.1.1)
Requirement already satisfied: pyasn1&lt;0.5.0,&gt;=0.4.6 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from pyasn1-modules&gt;=0.2.1-&gt;google-auth&lt;3,&gt;=1.6.3-&gt;tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (0.4.8)
Requirement already satisfied: oauthlib&gt;=3.0.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from requests-oauthlib&gt;=0.7.0-&gt;google-auth-oauthlib&lt;0.5,&gt;=0.4.1-&gt;tensorboard&lt;2.12,&gt;=2.11-&gt;tensorflow) (3.2.2)

[notice] A new release of pip is available: 23.0 -&gt; 23.2
[notice] To update, run: python -m pip install --upgrade pip
Note: you may need to restart the kernel to use updated packages.
Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: tensorflow_hub in ./.local/polaris/conda/2023-01-10-unstable/lib/python3.10/site-packages (0.13.0)
Requirement already satisfied: numpy&gt;=1.12.0 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow_hub) (1.23.5)
Requirement already satisfied: protobuf&gt;=3.19.6 in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from tensorflow_hub) (3.19.6)

[notice] A new release of pip is available: 23.0 -&gt; 23.2
[notice] To update, run: python -m pip install --upgrade pip
Note: you may need to restart the kernel to use updated packages.</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure the GPU is enabled</span></span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> tf.config.list_physical_devices(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPU'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Start the colab kernel with GPU: Runtime -&gt; Change runtime type -&gt; GPU'</span></span></code></pre></div>
</div>
<p>kipoiseq is a package that helps us to extract sequences from fasta files given some intervals. We will install the package.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install kipoiseq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5.2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>quiet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>null <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#changed ! in front of pip to % on polaris for package import </span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can ignore the pyYAML error</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
[notice] A new release of pip is available: 23.0 -&gt; 23.2
[notice] To update, run: python -m pip install --upgrade pip
Note: you may need to restart the kernel to use updated packages.</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install Biopython <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Biopython is a python package that helps us do many bioinfomatic analysis in python</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Defaulting to user installation because normal site-packages is not writeable
Requirement already satisfied: Biopython in ./.local/polaris/conda/2023-01-10-unstable/lib/python3.10/site-packages (1.81)
Requirement already satisfied: numpy in /soft/datascience/conda/2023-01-10/mconda3/lib/python3.10/site-packages (from Biopython) (1.23.5)

[notice] A new release of pip is available: 23.0 -&gt; 23.2
[notice] To update, run: python -m pip install --upgrade pip
Note: you may need to restart the kernel to use updated packages.</code></pre>
</div>
</div>
<p>We want to define some paths to save downloaded files for the duration of this notebook.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">transform_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gs://dm-enformer/models/enformer.finetuned.SAD.robustscaler-PCA500-robustscaler.transform.pkl'</span></span>
<span id="cb10-2">model_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://tfhub.dev/deepmind/enformer/1'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#where DeepMind stored the enformer model</span></span>
<span id="cb10-3">fasta_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/grand/TFXcan/imlab/users/srusti/enformer/data/genome.fa'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#contains the reference human genome</span></span></code></pre></div>
</div>
<p>We use B lymphoblastoid cell line predictions here because that is the cell line used to generate GEUVADIS gene expression data. You can copy the https link, paste in another tab in your browser and look through the large txt file for other tracks.</p>
</section>
<section id="extracting-dna-sequence-centered-at-locus" class="level2">
<h2 class="anchored" data-anchor-id="extracting-dna-sequence-centered-at-locus">Extracting DNA Sequence Centered at Locus</h2>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FastaStringExtractor:</span>
<span id="cb11-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, fasta_file):</span>
<span id="cb11-3">        <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyfaidx</span>
<span id="cb11-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyfaidx.Fasta(fasta_file)</span>
<span id="cb11-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._chromosome_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.items()}</span>
<span id="cb11-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, interval, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb11-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Truncate interval if it extends beyond the chromosome lengths.</span></span>
<span id="cb11-8">        <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq</span>
<span id="cb11-9">        chromosome_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._chromosome_sizes[interval.chrom]</span>
<span id="cb11-10">        trimmed_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(interval.chrom,</span>
<span id="cb11-11">                                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval.start, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb11-12">                                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(interval.end, chromosome_length),</span>
<span id="cb11-13">                                    )</span>
<span id="cb11-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyfaidx wants a 1-based interval</span></span>
<span id="cb11-15">        sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.get_seq(trimmed_interval.chrom,</span>
<span id="cb11-16">                                            trimmed_interval.start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb11-17">                                            trimmed_interval.stop).seq).upper()</span>
<span id="cb11-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill truncated values with N's.</span></span>
<span id="cb11-19">        pad_upstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>interval.start, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-20">        pad_downstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval.end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> chromosome_length, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pad_upstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pad_downstream</span>
<span id="cb11-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> close(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb11-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.close()</span></code></pre></div>
</div>
<p>To use the above function, first create an instance of the FastaStringExtractor object, providing a fasta file you want to use:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">fasta_extractor_object <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastaStringExtractor(fasta_file)</span></code></pre></div>
</div>
<p>Then, create an interval you want to extract the sequence from using kipoiseq (“.resize” will resize the interval you provide to a length provided by “sequence_length”. The new interval will be centered on the “start”, “end” you provided originally ):</p>
<p>target_interval = kipoiseq.Interval(chrom,start,end).resize(SEQUENCE_LENGTH)</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">SEQUENCE_LENGTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">393216</span></span>
<span id="cb13-2">target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr17'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38060848</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38074888</span>).resize(SEQUENCE_LENGTH) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#17q locus of asthma</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">target_interval</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Interval(chrom='chr17', start=37871260, end=38264476, name='', strand='.', ...)</code></pre>
</div>
</div>
<p>Finally, extract the sequence using the extractor object like this:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">extracted_sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fasta_extractor_object.extract(target_interval)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(extracted_sequence)</span></span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(extracted_sequence)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>393216</code></pre>
</div>
</div>
</section>
<section id="call-enformer-using-extracted-dna-sequence" class="level2">
<h2 class="anchored" data-anchor-id="call-enformer-using-extracted-dna-sequence">Call Enformer using Extracted DNA Sequence</h2>
<p>Next, we have some functions that will help us along the way. Classes and methods defined in this code block can be found in the <a href="https://colab.research.google.com/github/deepmind/deepmind_research/blob/master/enformer/enformer-usage.ipynb">original Enformer usage colab notebook</a>.</p>
<p><strong>Enformer, EnformerScoreVariantsNormalized, EnformerScoreVariantsPCANormalized</strong></p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title `Enformer`, `EnformerScoreVariantsNormalized`, `EnformerScoreVariantsPCANormalized`,</span></span>
<span id="cb19-2">SEQUENCE_LENGTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">393216</span></span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Enformer:</span>
<span id="cb19-5"></span>
<span id="cb19-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url):</span>
<span id="cb19-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hub.load(tfhub_url).model</span>
<span id="cb19-8"></span>
<span id="cb19-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb19-10">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs)</span>
<span id="cb19-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {k: v.numpy() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> predictions.items()}</span>
<span id="cb19-12"></span>
<span id="cb19-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@tf.function</span></span>
<span id="cb19-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> contribution_input_grad(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_sequence,</span>
<span id="cb19-15">                              target_mask, output_head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>):</span>
<span id="cb19-16">    input_sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_sequence[tf.newaxis]</span>
<span id="cb19-17"></span>
<span id="cb19-18">    target_mask_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.reduce_sum(target_mask)</span>
<span id="cb19-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> tf.GradientTape() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tape:</span>
<span id="cb19-20">      tape.watch(input_sequence)</span>
<span id="cb19-21">      prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.reduce_sum(</span>
<span id="cb19-22">          target_mask[tf.newaxis] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb19-23">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(input_sequence)[output_head]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> target_mask_mass</span>
<span id="cb19-24"></span>
<span id="cb19-25">    input_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tape.gradient(prediction, input_sequence) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> input_sequence</span>
<span id="cb19-26">    input_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.squeeze(input_grad, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb19-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tf.reduce_sum(input_grad, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-28"></span>
<span id="cb19-29"></span>
<span id="cb19-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EnformerScoreVariantsRaw:</span>
<span id="cb19-31"></span>
<span id="cb19-32">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url, organism<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>):</span>
<span id="cb19-33">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Enformer(tfhub_url)</span>
<span id="cb19-34">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._organism <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> organism</span>
<span id="cb19-35"></span>
<span id="cb19-36">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb19-37">    ref_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ref'</span>])[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._organism]</span>
<span id="cb19-38">    alt_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alt'</span>])[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._organism]</span>
<span id="cb19-39"></span>
<span id="cb19-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> alt_prediction.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ref_prediction.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-41"></span>
<span id="cb19-42"></span>
<span id="cb19-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EnformerScoreVariantsNormalized:</span>
<span id="cb19-44"></span>
<span id="cb19-45">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url, transform_pkl_path,</span>
<span id="cb19-46">               organism<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>):</span>
<span id="cb19-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> organism <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Transforms only compatible with organism=human'</span></span>
<span id="cb19-48">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerScoreVariantsRaw(tfhub_url, organism)</span>
<span id="cb19-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> tf.io.gfile.GFile(transform_pkl_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb19-50">      transform_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(f)</span>
<span id="cb19-51">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transform_pipeline.steps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># StandardScaler.</span></span>
<span id="cb19-52"></span>
<span id="cb19-53">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb19-54">    scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs)</span>
<span id="cb19-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform.transform(scores)</span>
<span id="cb19-56"></span>
<span id="cb19-57"></span>
<span id="cb19-58"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EnformerScoreVariantsPCANormalized:</span>
<span id="cb19-59"></span>
<span id="cb19-60">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url, transform_pkl_path,</span>
<span id="cb19-61">               organism<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>, num_top_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>):</span>
<span id="cb19-62">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerScoreVariantsRaw(tfhub_url, organism)</span>
<span id="cb19-63">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> tf.io.gfile.GFile(transform_pkl_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb19-64">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(f)</span>
<span id="cb19-65">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._num_top_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_top_features</span>
<span id="cb19-66"></span>
<span id="cb19-67">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb19-68">    scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs)</span>
<span id="cb19-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform.transform(scores)[:, :<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._num_top_features]</span>
<span id="cb19-70"></span>
<span id="cb19-71"></span>
<span id="cb19-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(avsec): Add feature description: Either PCX, or full names.</span></span></code></pre></div>
</div>
<p><strong>One Hot Encoder</strong></p>
<p>One-Hot Encoder converts the region of the genome from letters like A, G, T, C to binary (1, 0)</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_hot_encode(sequence):</span>
<span id="cb20-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> kipoiseq.transforms.functional.one_hot_dna(sequence).astype(np.float32)</span>
<span id="cb20-3"></span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> variant_centered_sequences(vcf_file, sequence_length, gzipped<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb20-6">                               chr_prefix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>):</span>
<span id="cb20-7">  seq_extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.extractors.VariantSeqExtractor(</span>
<span id="cb20-8">    reference_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>FastaStringExtractor(fasta_file))</span>
<span id="cb20-9"></span>
<span id="cb20-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> variant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> variant_generator(vcf_file, gzipped<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gzipped):</span>
<span id="cb20-11">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Interval(chr_prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> variant.chrom,</span>
<span id="cb20-12">                        variant.pos, variant.pos)</span>
<span id="cb20-13">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval.resize(sequence_length)</span>
<span id="cb20-14">    center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval.center() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> interval.start</span>
<span id="cb20-15"></span>
<span id="cb20-16">    reference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_extractor.extract(interval, [], anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>center)</span>
<span id="cb20-17">    alternate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seq_extractor.extract(interval, [variant], anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>center)</span>
<span id="cb20-18"></span>
<span id="cb20-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inputs'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ref'</span>: one_hot_encode(reference),</span>
<span id="cb20-20">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alt'</span>: one_hot_encode(alternate)},</span>
<span id="cb20-21">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'metadata'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chrom'</span>: chr_prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> variant.chrom,</span>
<span id="cb20-22">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pos'</span>: variant.pos,</span>
<span id="cb20-23">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>: variant.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>,</span>
<span id="cb20-24">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ref'</span>: variant.ref,</span>
<span id="cb20-25">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alt'</span>: variant.alt}}</span></code></pre></div>
</div>
<p>Defining the Enformer model and fasta_extractor in order to run Enformer</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Enformer(model_path)</span>
<span id="cb21-2">fasta_extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastaStringExtractor(fasta_file)</span></code></pre></div>
</div>
<p>Run One Hot Encoder and run enformer.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">sequence_one_hot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot_encode(fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH)))</span>
<span id="cb22-2">predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(sequence_one_hot[np.newaxis])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">predictions.shape <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#shows that this is the 896 by 5313 matrix that Enformer outputs</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>(896, 5313)</code></pre>
</div>
</div>
</section>
<section id="plot-enformer-matrix-896-x-5313" class="level2">
<h2 class="anchored" data-anchor-id="plot-enformer-matrix-896-x-5313">Plot Enformer Matrix (896 x 5313)</h2>
<p>We will plot this Enformer matrix in R, so it needs to be converted to a CSV file in this notebook first. After saving it as a csv file, we will read the file in RStudio and visualize it using image(matrix), where “matrix” is the name of our Enformer predictions matrix (assigned as ‘predictions’).</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb25-2"></span>
<span id="cb25-3">np.savetxt(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/grand/TFXcan/imlab/users/srusti/enformer/data/q17_enformer.csv'</span>, predictions, delimiter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)</span></code></pre></div>
</div>
<p>To save the file from polaris directory to local directory, use the command scp:</p>
<p>scp sd04@polaris.alcf.anl.gov:/grand/TFXcan/imlab/users/srusti/enformer/data/q17_enformer.csv ~/localfolderpath</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(predictions.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>559.01654</code></pre>
</div>
</div>
<p>Attempts at making a plot of the enformer output matrix. Very computationally expensive.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#vmax = predictions.max()</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#sns.heatmap(predictions, vmin=0, vmax=1)</span></span></code></pre></div>
</div>
</section>
<section id="plot-tracks" class="level2">
<h2 class="anchored" data-anchor-id="plot-tracks">Plot Tracks</h2>
<p>Function to plot tracks</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_tracks(tracks, interval, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>):</span>
<span id="cb29-2">  fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tracks), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tracks)), sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax, (title, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(axes, tracks.items()):</span>
<span id="cb29-4">    ax.fill_between(np.linspace(interval.start, interval.end, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)), y)</span>
<span id="cb29-5">    ax.set_title(title)</span>
<span id="cb29-6">    sns.despine(top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-7">  ax.set_xlabel(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(interval))</span>
<span id="cb29-8">  plt.tight_layout()</span></code></pre></div>
</div>
<p>Download targets_human.txt</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">targets_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/calico/basenji/master/manuscripts/cross2020/targets_human.txt'</span> </span>
<span id="cb30-2">df_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(targets_txt, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb30-3">df_targets</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">genome</th>
<th data-quarto-table-cell-role="th">identifier</th>
<th data-quarto-table-cell-role="th">file</th>
<th data-quarto-table-cell-role="th">clip</th>
<th data-quarto-table-cell-role="th">scale</th>
<th data-quarto-table-cell-role="th">sum_stat</th>
<th data-quarto-table-cell-role="th">description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>0</td>
<td>ENCFF833POA</td>
<td>/home/drk/tillage/datasets/human/dnase/encode/...</td>
<td>32</td>
<td>2</td>
<td>mean</td>
<td>DNASE:cerebellum male adult (27 years) and mal...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>0</td>
<td>ENCFF110QGM</td>
<td>/home/drk/tillage/datasets/human/dnase/encode/...</td>
<td>32</td>
<td>2</td>
<td>mean</td>
<td>DNASE:frontal cortex male adult (27 years) and...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>0</td>
<td>ENCFF880MKD</td>
<td>/home/drk/tillage/datasets/human/dnase/encode/...</td>
<td>32</td>
<td>2</td>
<td>mean</td>
<td>DNASE:chorion</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>0</td>
<td>ENCFF463ZLQ</td>
<td>/home/drk/tillage/datasets/human/dnase/encode/...</td>
<td>32</td>
<td>2</td>
<td>mean</td>
<td>DNASE:Ishikawa treated with 0.02% dimethyl sul...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>0</td>
<td>ENCFF890OGQ</td>
<td>/home/drk/tillage/datasets/human/dnase/encode/...</td>
<td>32</td>
<td>2</td>
<td>mean</td>
<td>DNASE:GM03348</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5308</td>
<td>5308</td>
<td>0</td>
<td>CNhs14239</td>
<td>/home/drk/tillage/datasets/human/cage/fantom/C...</td>
<td>384</td>
<td>1</td>
<td>sum</td>
<td>CAGE:epithelioid sarcoma cell line:HS-ES-2R</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5309</td>
<td>5309</td>
<td>0</td>
<td>CNhs14240</td>
<td>/home/drk/tillage/datasets/human/cage/fantom/C...</td>
<td>384</td>
<td>1</td>
<td>sum</td>
<td>CAGE:squamous cell lung carcinoma cell line:RE...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5310</td>
<td>5310</td>
<td>0</td>
<td>CNhs14241</td>
<td>/home/drk/tillage/datasets/human/cage/fantom/C...</td>
<td>384</td>
<td>1</td>
<td>sum</td>
<td>CAGE:gastric cancer cell line:GSS</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5311</td>
<td>5311</td>
<td>0</td>
<td>CNhs14244</td>
<td>/home/drk/tillage/datasets/human/cage/fantom/C...</td>
<td>384</td>
<td>1</td>
<td>sum</td>
<td>CAGE:carcinoid cell line:NCI-H727</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5312</td>
<td>5312</td>
<td>0</td>
<td>CNhs14245</td>
<td>/home/drk/tillage/datasets/human/cage/fantom/C...</td>
<td>384</td>
<td>1</td>
<td>sum</td>
<td>CAGE:lung adenocarcinoma, papillary cell line:...</td>
</tr>
</tbody>
</table>

<p>5313 rows × 8 columns</p>
</div>
</div>
</div>
<p>Function to extract from dataframe based on substring</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> idx_substr(df, column_name, substring):</span>
<span id="cb31-2">    mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[column_name].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(substring)</span>
<span id="cb31-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> df[mask].index</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx_substr(df_targets, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'H3K27ac'</span>)</span>
<span id="cb32-2">array_h32kac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(indices)</span>
<span id="cb32-3">list_h32kac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> array_h32kac.tolist()</span>
<span id="cb32-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(list_h32kac)</span>
<span id="cb32-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(list_h32kac)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[688, 705, 706, 707, 719, 724, 732, 737, 743, 752, 764, 770, 788, 817, 848, 853, 864, 1107, 1379, 1397, 1408, 1443, 1448, 1450, 1452, 1456, 1470, 1471, 1481, 1487, 1488, 1492, 1494, 1499, 1533, 1534, 1553, 1555, 1579, 1610, 1628, 1648, 1657, 1659, 1671, 1700, 1715, 1741, 1744, 1778, 1789, 1838, 1844, 1871, 1882, 1921, 1938, 1981, 2000, 2008, 2039, 2047, 2057, 2077, 2089, 2090, 2104, 2106, 2111, 2122, 2150, 2155, 2162, 2169, 2170, 2188, 2230, 2234, 2280, 2283, 2285, 2322, 2380, 2385, 2389, 2407, 2410, 2420, 2425, 2433, 2436, 2448, 2454, 2510, 2537, 2572, 2604, 2606, 2640, 2644, 2670, 2683, 2684, 2745, 2761, 2763, 2789, 2795, 2821, 2832, 2833, 2839, 2856, 2862, 2899, 2970, 2976, 2991, 2994, 3019, 3024, 3025, 3060, 3065, 3083, 3108, 3116, 3127, 3138, 3162, 3181, 3183, 3194, 3234, 3242, 3254, 3285, 3296, 3297, 3299, 3300, 3312, 3324, 3330, 3339, 3343, 3360, 3363, 3429, 3432, 3436, 3444, 3457, 3460, 3462, 3475, 3478, 3485, 3501, 3530, 3539, 3542, 3547, 3588, 3592, 3657, 3664, 3670, 3671, 3674, 3686, 3690, 3692, 3702, 3703, 3724, 3725, 3736, 3744, 3747, 3759, 3764, 3773, 3789, 3806, 3824, 3836, 3844, 3851, 3854, 3900, 3925, 3928, 3936, 3946, 3959, 3995, 4004, 4026, 4027, 4036, 4048, 4057, 4089, 4093, 4149, 4152, 4164, 4192, 4194, 4196, 4200, 4245, 4261, 4263, 4266, 4275, 4282, 4312, 4323, 4359, 4378, 4380, 4410, 4427, 4461, 4463, 4477]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>228</code></pre>
</div>
</div>
<p>The columns in the ‘predictions’ enformer output matrix is the same as the rows in the human targets dataframe.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#idk why this for loop isn't working (goal is to iterate through the list of indices and plot the tracks for each of those indices)</span></span>
<span id="cb35-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#for i in list_h32kac:</span></span>
<span id="cb35-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tracks = predictions[:, i]</span></span>
<span id="cb35-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot_tracks(targets, target_interval)</span></span></code></pre></div>
</div>
<p>Trying for loop again but with dictionary comprehension.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">hm_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_targets[df_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H3K27ac"</span>)]</span>
<span id="cb36-2">hm_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hm_targets.index.to_numpy()</span>
<span id="cb36-3">hm_desc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hm_targets.description</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(hm_desc)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>228</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(hm_desc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>688                                  CHIP:H3K27ac:GM12878
705     CHIP:H3K27ac:endothelial cell of umbilical vei...
706                      CHIP:H3K27ac:keratinocyte female
707     CHIP:H3K27ac:mammary epithelial cell female ad...
719     CHIP:H3K27ac:fibroblast of lung female child (...
                              ...                        
4410      CHIP:H3K27ac:chorionic villus embryo (16 weeks)
4427    CHIP:H3K27ac:stomach smooth muscle female adul...
4461    CHIP:H3K27ac:right lobe of liver female adult ...
4463    CHIP:H3K27ac:ascending aorta female adult (51 ...
4477                                   CHIP:H3K27ac:RWPE2
Name: description, Length: 228, dtype: object</code></pre>
</div>
</div>
<p>Taking too long to run, but worked at some point?</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tracks = {}</span></span>
<span id="cb41-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#for id, desc in zip(hm_indices, hm_desc[:30]):</span></span>
<span id="cb41-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tracks[desc] = predictions[:, id]</span></span>
<span id="cb41-4"></span>
<span id="cb41-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot_tracks(tracks, target_interval)</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb42-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, desc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(hm_indices, hm_desc[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]):</span>
<span id="cb42-3">    tracks[desc] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions[:, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>]</span>
<span id="cb42-4">plot_tracks(tracks, target_interval)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/2023-07-19-katenproj/enf_proj_partone_files/figure-html/cell-31-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>With the above plots, the y-axis is signal strength and the x-axis is locations along the genome. Keep in mind that the y-axis is different for each plot, so don’t be misguided by that. The peaks indicate a strong signal.</p>
<p>Creating new matrix of just H32Kac histone modifications.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"></span>
<span id="cb43-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> spec_matr(matrix, indices):</span>
<span id="cb43-3">    selected_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> matrix[:, indices]</span>
<span id="cb43-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> selected_columns</span>
<span id="cb43-5"></span>
<span id="cb43-6">hist_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spec_matr(predictions, hm_indices)</span>
<span id="cb43-7">hist_mat</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>array([[3.4532719 , 0.2985505 , 0.24109149, ..., 0.19910996, 0.72555166,
        0.4647423 ],
       [5.4941144 , 0.3681377 , 0.3043263 , ..., 0.4559032 , 0.8414081 ,
        0.57398266],
       [7.0137544 , 0.5032303 , 0.31948483, ..., 0.8457772 , 0.97886765,
        0.63686115],
       ...,
       [0.36366862, 0.24753092, 0.28972805, ..., 2.8498976 , 1.4871123 ,
        0.6114363 ],
       [0.52115595, 0.3303019 , 0.4472383 , ..., 3.1200168 , 1.6202507 ,
        0.6328136 ],
       [0.55854005, 0.34868008, 0.50969756, ..., 2.7834978 , 1.532995  ,
        0.7045519 ]], dtype=float32)</code></pre>
</div>
</div>
<p>Transpose Matrix</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">final_hist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hist_mat.transpose()</span></code></pre></div>
</div>
<p>Conducting PCA.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.decomposition <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PCA</span>
<span id="cb46-2"></span>
<span id="cb46-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an instance of PCA with the desired number of components</span></span>
<span id="cb46-4">n_components <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify the number of components you want to retain</span></span>
<span id="cb46-5">pca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PCA(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_components)</span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit the PCA model to the data</span></span>
<span id="cb46-8">pca.fit(final_hist)</span>
<span id="cb46-9"></span>
<span id="cb46-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transform the data to the principal components</span></span>
<span id="cb46-11">transformed_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pca.transform(final_hist)</span>
<span id="cb46-12"></span>
<span id="cb46-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Access the principal components and explained variance ratio</span></span>
<span id="cb46-14">principal_components <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pca.components_  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The principal components</span></span>
<span id="cb46-15">explained_variance_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pca.explained_variance_ratio_  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The explained variance ratio</span></span>
<span id="cb46-16"></span>
<span id="cb46-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the shape of the transformed data matrix</span></span>
<span id="cb46-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shape of transformed data:"</span>, transformed_data.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Shape of transformed data: (228, 2)</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(transformed_data)</span>
<span id="cb48-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(principal_components)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[ 4.29011536e+02  2.22290955e+01]
 [-5.69267349e+01 -1.08432522e+01]
 [-4.69018288e+01 -1.38660965e+01]
 [-4.59444046e+01 -4.11515465e+01]
 [-4.39879303e+01  2.97819118e+01]
 [-5.16800003e+01 -2.73693275e+01]
 [-4.01018257e+01 -5.44725723e+01]
 [-5.65888405e+01 -4.55863190e+00]
 [-3.71873703e+01  1.38539836e-01]
 [-5.18663254e+01  2.18277168e+01]
 [-5.05086899e+01  1.34429789e+01]
 [-4.23644371e+01 -2.61824875e+01]
 [-2.54263306e+01 -1.40245380e+01]
 [-3.33487701e+01 -2.68672447e+01]
 [-4.16338120e+01 -2.23779335e+01]
 [ 2.43114105e+02 -2.46385098e+01]
 [-3.11567783e+01  5.64350224e+00]
 [-4.13973656e+01  3.40232124e+01]
 [-4.34654579e+01 -1.31848364e+01]
 [-4.33576012e+01 -6.40500488e+01]
 [-3.23937759e+01 -2.04059925e+01]
 [-4.50845947e+01 -2.66593685e+01]
 [-3.96888695e+01 -2.76189556e+01]
 [-3.15704613e+01 -2.07621441e+01]
 [-4.81673584e+01 -3.35985870e+01]
 [-3.21420021e+01  5.59729719e+00]
 [ 2.07487457e+02  3.80075455e+01]
 [-5.25247459e+01  1.01850500e+01]
 [-1.68820076e+01  1.38995316e+02]
 [-3.75192680e+01 -4.40471458e+01]
 [-4.32694321e+01 -4.00518265e+01]
 [-3.93787422e+01 -2.75708599e+01]
 [-3.22931328e+01 -9.68781281e+00]
 [-3.71183281e+01 -1.02942362e+01]
 [-4.62695847e+01  6.29523010e+01]
 [-2.60679970e+01  5.49248314e+00]
 [-3.38679123e+01 -2.13475609e+01]
 [-2.66797714e+01  5.17271042e+01]
 [ 1.34053024e+02  2.82612839e+01]
 [-2.63137608e+01 -4.17184448e+01]
 [-5.81946678e+01 -7.33444023e+00]
 [-3.41397362e+01 -4.59948578e+01]
 [-1.92752113e+01 -8.86211205e+00]
 [-4.20858536e+01  6.57025375e+01]
 [-4.65590286e+01 -7.66036940e+00]
 [-3.86707954e+01 -5.30003624e+01]
 [ 3.77290611e+01  6.00368042e+01]
 [-3.63304863e+01 -5.57575798e+01]
 [-3.38382263e+01  9.58611679e+01]
 [-2.04216919e+01 -6.55782928e+01]
 [-3.00452023e+01  1.53084908e+01]
 [-3.50913811e+01  8.83654308e+00]
 [-3.73023529e+01 -4.48953400e+01]
 [ 2.23328190e+01  8.94171448e+01]
 [ 2.73067657e+02  8.77895584e+01]
 [-4.93203392e+01  1.38920860e+01]
 [ 2.66937160e+01 -3.80065422e+01]
 [ 1.44788361e+02  2.84333076e+01]
 [ 8.29694843e+00  5.61711693e+01]
 [-3.65062141e+01 -4.99313889e+01]
 [-3.67822266e+01  5.85734825e+01]
 [ 3.12843658e+02 -2.18936634e+01]
 [-3.68099365e+01 -2.72697487e+01]
 [-4.08568077e+01 -5.78830223e+01]
 [-3.67619247e+01 -4.61754913e+01]
 [-3.80882645e+01 -4.52177450e-02]
 [ 1.03285408e+01  5.37351379e+01]
 [-3.68850555e+01  9.20241642e+00]
 [-4.75946541e+01 -2.46286678e+01]
 [ 5.77541389e+01  1.30170755e+01]
 [ 2.20004532e+02  1.85489998e+01]
 [-3.65023613e+01 -4.42782068e+00]
 [-3.29801903e+01 -2.30454960e+01]
 [-2.68703537e+01  9.58869934e+00]
 [-5.88332701e+00  1.26219170e+02]
 [ 4.40409660e+01  4.79163094e+01]
 [-3.68162346e+01  9.13014507e+00]
 [-5.07439423e+01 -3.06412258e+01]
 [-2.84839706e+01 -2.79092045e+01]
 [-5.00830536e+01 -5.80908813e+01]
 [-3.22056770e+01  9.33245544e+01]
 [-3.49726830e+01 -1.83637791e+01]
 [ 3.94312782e+01  3.78827209e+01]
 [ 7.95509720e+01  9.48300095e+01]
 [ 4.20624786e+02 -1.42585419e+02]
 [ 1.51039017e+02  3.76787033e+01]
 [-4.25561981e+01 -5.97834740e+01]
 [-4.07407341e+01  4.77314987e+01]
 [-2.42844086e+01  3.88061371e+01]
 [-4.37783203e+01 -4.33335075e+01]
 [-3.69794388e+01 -1.31550121e+00]
 [ 1.94745464e+01  3.43488503e+01]
 [-4.54127769e+01  1.03664375e+02]
 [-3.93407173e+01 -6.10991173e+01]
 [-3.70460701e+01 -2.56169071e+01]
 [-4.54350128e+01 -3.08959694e+01]
 [-4.03714256e+01 -3.08495255e+01]
 [-3.92553940e+01 -3.51556473e+01]
 [ 2.53297211e+02 -1.19507599e+00]
 [-3.71793709e+01 -3.21928749e+01]
 [-3.28474159e+01  8.95710373e+00]
 [-3.68372269e+01 -5.10462532e+01]
 [-7.61320162e+00  2.30268955e+00]
 [-4.25793991e+01 -5.74623718e+01]
 [-4.24105530e+01 -6.15009193e+01]
 [-3.60462646e+01 -5.44592323e+01]
 [-2.74201794e+01  1.14738493e+01]
 [-2.90295601e+01  2.01064968e+01]
 [-3.53001595e+01  1.10632812e+02]
 [ 2.22803555e+01  7.03419495e+01]
 [ 3.81587036e+02 -8.41837616e+01]
 [-3.86170731e+01 -7.05622635e+01]
 [ 2.49438572e+01  4.28692932e+01]
 [-1.90403214e+01  4.26871109e+01]
 [-3.79729309e+01 -5.88901024e+01]
 [-4.53931580e+01 -2.09241810e+01]
 [-3.47246590e+01 -1.54767399e+01]
 [-2.59182529e+01  3.76684341e+01]
 [-3.42783279e+01 -4.67825813e+01]
 [-3.76835518e+01 -5.38021049e+01]
 [-4.27225952e+01 -6.09182281e+01]
 [-3.63095932e+01 -1.81886292e+01]
 [-5.07480202e+01 -1.09040594e+01]
 [-3.12425404e+01  2.53055859e+01]
 [-2.55199833e+01  6.13841581e+00]
 [-2.98957691e+01  2.61851444e+01]
 [-2.37498245e+01  1.31911783e+01]
 [ 1.18976517e+02  1.17883396e+01]
 [-5.29053764e+01  2.46011753e+01]
 [-5.59937248e+01  3.36087914e+01]
 [ 8.93202057e+01 -9.59020233e+00]
 [-9.43033600e+00  2.89637413e+01]
 [-5.68391609e+01  2.55285702e+01]
 [ 3.44866669e+02  1.17349251e+02]
 [-4.39300995e+01 -3.89736519e+01]
 [-2.70862446e+01  5.03467798e+00]
 [-5.12989578e+01  1.15099197e+02]
 [-3.41276779e+01  4.52498360e+01]
 [-3.58260727e+01 -5.82839012e+01]
 [ 3.13724762e+02 -5.35614967e+01]
 [-1.93395538e+01 -1.33511982e+01]
 [-3.76825714e+01 -1.95338917e+01]
 [-3.06163883e+01 -1.69042358e+01]
 [-3.73312225e+01 -2.23549347e+01]
 [-3.95571823e+01 -3.32918205e+01]
 [ 1.54117031e+01 -4.22962990e+01]
 [-3.13595505e+01 -2.13842945e+01]
 [-2.62953758e+01 -3.74205933e+01]
 [-9.26836014e+00 -1.79718494e+01]
 [-3.71944885e+01  1.34128332e+01]
 [-2.49401283e+01  6.67440939e+00]
 [-3.42405853e+01  1.08643332e+01]
 [ 5.81706953e+00  2.15994396e+01]
 [-4.26727257e+01 -6.24939194e+01]
 [-3.71272888e+01  2.39180527e+01]
 [-2.41525040e+01  5.49193726e+01]
 [ 2.34967194e+02 -1.14961380e+02]
 [-4.33071709e+01 -5.64517856e-01]
 [-4.08752747e+01 -4.42880821e+01]
 [ 1.15195724e+02  4.04951324e+01]
 [-3.51686211e+01  8.38030472e+01]
 [ 1.11027174e+01  1.15874794e+02]
 [-2.22046967e+01  1.46998167e-01]
 [-3.56695557e+01 -4.88601837e+01]
 [-1.76058445e+01 -9.75905228e+00]
 [-4.30125923e+01 -3.71555290e+01]
 [-3.30353241e+01  4.55915213e+00]
 [-1.58585148e+01  1.74811292e+00]
 [-1.85552063e+01  5.17074127e+01]
 [ 3.34669456e+01  9.39320297e+01]
 [ 1.26497200e+02  5.82720375e+01]
 [ 2.38732193e+02  1.00835213e+02]
 [-3.34099617e+01 -5.78747845e+00]
 [-4.24933319e+01 -5.80559807e+01]
 [-4.28196487e+01 -5.62694626e+01]
 [-3.08743916e+01 -3.22959023e+01]
 [-4.93449936e+01  7.98572845e+01]
 [-2.45137901e+01  1.88400478e+01]
 [ 4.82275452e+02 -1.47586578e+02]
 [-2.96534691e+01  7.96313171e+01]
 [-3.86990013e+01 -5.42709274e+01]
 [-3.46719055e+01 -2.01223125e+01]
 [-3.93394318e+01 -2.59303074e+01]
 [ 2.07254059e+02  1.53771029e+01]
 [-2.97735901e+01 -3.11685352e+01]
 [-4.89033699e+01 -3.03857098e+01]
 [-3.69259415e+01  1.72739487e+01]
 [-4.19947815e+01 -7.78310013e+00]
 [ 3.40358276e+01  5.69028130e+01]
 [-3.71713982e+01 -2.90266609e+01]
 [-4.85662117e+01  4.61616554e+01]
 [-4.06754417e+01 -1.16337070e+01]
 [-3.79456444e+01 -6.11480751e+01]
 [-4.59131393e+01  9.13757324e+01]
 [-4.11263657e+01 -4.71965141e+01]
 [ 7.47286224e+01  1.63572235e+01]
 [-2.90668678e+01 -5.09082794e+00]
 [-5.28644218e+01 -3.58812370e+01]
 [-3.95946579e+01 -6.44072342e+01]
 [ 7.04939194e+01 -4.87671328e+00]
 [ 2.88817825e+01  8.63479080e+01]
 [-4.05268555e+01 -5.78434715e+01]
 [-5.11247940e+01  3.27800980e+01]
 [-3.71981506e+01  9.48750916e+01]
 [ 2.62284607e+02 -6.50315933e+01]
 [-4.25689583e+01 -7.42995377e+01]
 [-4.07852783e+01 -6.97394104e+01]
 [-4.49803810e+01 -5.42197647e+01]
 [-4.50117916e-01  1.47176781e+01]
 [-4.03771782e+01 -2.02594643e+01]
 [ 2.06398315e+02  6.46117783e+01]
 [-1.98057556e+01  7.55205917e+01]
 [-3.96195908e+01 -2.98523979e+01]
 [-3.40876937e+00  6.28066940e+01]
 [-3.52510300e+01 -2.98614140e+01]
 [-5.37423782e+01 -1.32766590e+01]
 [-3.23342743e+01  8.63807011e+00]
 [-3.44744759e+01 -3.47955551e+01]
 [-4.73818779e+01  8.05034103e+01]
 [-4.12652130e+01 -3.32382736e+01]
 [-4.81539116e+01  8.43865814e+01]
 [ 8.89602585e+01 -3.33640862e+01]
 [-3.97470970e+01 -6.37618065e+01]
 [-3.32443275e+01 -3.48026009e+01]
 [-3.85740662e+01  2.28718262e+01]
 [ 1.94737492e+01  1.78730286e+02]
 [-3.60090981e+01  4.54106827e+01]
 [-5.03066788e+01 -4.56403084e+01]]
[[ 0.00782844  0.01060935  0.01315628 ... -0.00110051 -0.00120934
  -0.0007786 ]
 [-0.00430667 -0.00433361 -0.00487834 ...  0.00233991  0.00243056
   0.00122821]]</code></pre>
</div>
</div>
<p>In the code above, we import the necessary modules and create an instance of the PCA class from scikit-learn. We specify the desired number of components (n_components) as an argument. Next, we fit the PCA model to the data_matrix using the fit() method. Then, we transform the original data to the principal components using the transform() method.</p>
<p>You can access the principal components via the components_ attribute and the explained variance ratio via the explained_variance_ratio_ attribute of the PCA object.</p>
<p>Finally, we print the shape of the transformed data matrix and show the first few rows of the transformed data.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#producing a PCA plot</span></span>
<span id="cb50-2"></span>
<span id="cb50-3">plt.scatter(transformed_data[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], transformed_data[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb50-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Principal Component 1"</span>)</span>
<span id="cb50-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Principal Component 2"</span>)</span>
<span id="cb50-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PCA Plot"</span>)</span>
<span id="cb50-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/2023-07-19-katenproj/enf_proj_partone_files/figure-html/cell-36-output-1.png" class="img-fluid"></p>
</div>
</div>
<p><strong>Potential further exploration at asthma locus</strong></p>
<ul>
<li>Remove outliers in data and replot</li>
<li>Label some of the outliers in the PCA plot with the cell type</li>
<li>Regulatory regions (?), look at the variation in the peaks that are not at the specific locus (so at the beginning of each plot).</li>
<li>Plot the peaks on the left on the PCA plot. Sum of the half of the bins for each plot and plot it on the PCA to see if there’s a pattern.</li>
</ul>
</section>
<section id="cell-type-specific-histone-modification-analysis" class="level2">
<h2 class="anchored" data-anchor-id="cell-type-specific-histone-modification-analysis">Cell Type Specific Histone Modification Analysis</h2>
<p>Lung tissue cells:</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">lung_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_targets[df_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CHIP"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H3K27ac"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lung"</span>)]</span>
<span id="cb51-2">lung_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lung_targets.index.to_numpy()</span>
<span id="cb51-3">lung_desc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lung_targets.description</span>
<span id="cb51-4"></span>
<span id="cb51-5">tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb51-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, desc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(lung_indices, lung_desc[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]):</span>
<span id="cb51-7">    tracks[desc] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions[:, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>]</span>
<span id="cb51-8">plot_tracks(tracks, target_interval)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/2023-07-19-katenproj/enf_proj_partone_files/figure-html/cell-37-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>T cells (takes too long to run):</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tcell_targets = df_targets[df_targets["description"].str.contains("CHIP") &amp; df_targets["description"].str.contains("H3K27ac") &amp; df_targets["description"].str.contains("T cell")]</span></span>
<span id="cb52-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tcell_indices = tcell_targets.index.to_numpy()</span></span>
<span id="cb52-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tcell_desc = tcell_targets.description</span></span>
<span id="cb52-4"></span>
<span id="cb52-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tracks = {}</span></span>
<span id="cb52-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#for id, desc in zip(tcell_indices, tcell_desc[:1]):</span></span>
<span id="cb52-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tracks[desc] = predictions[:, id]</span></span>
<span id="cb52-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot_tracks(tracks, target_interval)</span></span></code></pre></div>
</div>
<p>Heart tissue (takes too long to run):</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#heart_targets = df_targets[df_targets["description"].str.contains("CHIP") &amp; df_targets["description"].str.contains("H3K27ac") &amp; df_targets["description"].str.contains("heart")]</span></span>
<span id="cb53-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#heart_indices = heart_targets.index.to_numpy()</span></span>
<span id="cb53-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#heart_desc = heart_targets.description</span></span>
<span id="cb53-4"></span>
<span id="cb53-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tracks = {}</span></span>
<span id="cb53-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#for id, desc in zip(heart_indices, heart_desc[:5]):</span></span>
<span id="cb53-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tracks[desc] = predictions[:, id]</span></span>
<span id="cb53-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot_tracks(tracks, target_interval)</span></span></code></pre></div>
</div>
</section>
<section id="exploratory-analysis-of-enformer-predictions-by-haplotype-averaging" class="level2">
<h2 class="anchored" data-anchor-id="exploratory-analysis-of-enformer-predictions-by-haplotype-averaging">Exploratory Analysis of Enformer Predictions by Haplotype Averaging</h2>
<p>Enformer was trained with the reference genome, and with individuals of european ancestry. We are interested to see, instead of using the reference genome, how to use an average genome across a population (population allele frequencies) with the long term goal of recognizing differences between people. This MAY make a difference in the “population-average epigenome” compared to the “regular reference” epigenome. But to do so, we need to figure out if it even makes a difference if you average the genome and run enf vs run each genome and average their outputs.</p>
<p>Question: is enformer linear? To answer: - Run enformer with one averaged haplotype and produce epigenome 1 - Run enformer with each haplotype individually and average the two matrices to produce epigenome 2 - Compare epigenome 1 with epigenome 2</p>
</section>
<section id="predicting-on-average-haplotype" class="level2">
<h2 class="anchored" data-anchor-id="predicting-on-average-haplotype">Predicting on Average Haplotype</h2>
<p>Change the run predictions function: Currently it is averaging the predictions from each haplotype individually. We need to change it so that it averages the haplotype before it predicts.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="39">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_hapavg_predictions(gene_intervals, tss_dataframe, individuals_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb54-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb54-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters :</span></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    gene_intervals : the results from calling `collect_intervals`</span></span>
<span id="cb54-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tss_dataframe : a list of the TSSs dataframes i.e. the TSS for the genes in the chromosomes</span></span>
<span id="cb54-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    individuals_list : a list of individuals on which we want to make predictions; defaults to None</span></span>
<span id="cb54-7"></span>
<span id="cb54-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns :</span></span>
<span id="cb54-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A list of predictions; the first element is the predictions around the TSS for each gene. The second is the prediction across CAGE tracks</span></span>
<span id="cb54-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb54-11"></span>
<span id="cb54-12">  gene_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb54-13">  gene_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb54-14"></span>
<span id="cb54-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_intervals.keys():</span>
<span id="cb54-16">    gene_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_intervals[gene]</span>
<span id="cb54-17">    target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb54-18">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb54-19">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creates an interval to select the right sequences</span></span>
<span id="cb54-20">    target_fa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extracts the fasta sequences, and resizes such that it is compatible with the sequence_length</span></span>
<span id="cb54-21">    window_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_interval.resize(SEQUENCE_LENGTH) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we also need information about the start and end locations after resizing</span></span>
<span id="cb54-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb54-23">      cur_gene_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/srusti/enformer/data/individual_beds/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read in the appropriate bed file for the gene</span></span>
<span id="cb54-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span>:</span>
<span id="cb54-25">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb54-26">    individual_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb54-27">    individual_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb54-28"></span>
<span id="cb54-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(np.empty([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))):</span>
<span id="cb54-30">      use_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals_list</span>
<span id="cb54-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)):</span>
<span id="cb54-32">      use_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cur_gene_vars.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:]</span>
<span id="cb54-33"></span>
<span id="cb54-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> use_individuals:</span>
<span id="cb54-35">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Currently on gene </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, and predicting on individual </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(gene, individual))</span>
<span id="cb54-36">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># two haplotypes per individual</span></span>
<span id="cb54-37">      haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb54-38">      haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb54-39"></span>
<span id="cb54-40">      ref_mismatch_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb54-41">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur_gene_vars.iterrows():</span>
<span id="cb54-42"></span>
<span id="cb54-43">        geno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[individual].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb54-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(haplo_2):</span>
<span id="cb54-45">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb54-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb54-47">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb54-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb54-49">          haplo_1[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb54-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb54-51">          haplo_2[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb54-52">    </span>
<span id="cb54-53"></span>
<span id="cb54-54">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict on the individual's two haplotypes</span></span>
<span id="cb54-55">      prediction_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_1))[np.newaxis])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb54-56">      prediction_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_2))[np.newaxis])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb54-57"></span>
<span id="cb54-58">      haplo_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.add((one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_1))[np.newaxis]), (one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_2))[np.newaxis])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#line which averages</span></span>
<span id="cb54-59">      prediction_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(haplo_avg)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb54-60"></span>
<span id="cb54-61">      temp_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [prediction_avg[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>]]</span>
<span id="cb54-62">      individual_prediction[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp_predictions</span>
<span id="cb54-63"></span>
<span id="cb54-64">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate TSS CAGE expression which correspond to column 5110 of the predictions above</span></span>
<span id="cb54-65">      temp_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb54-66"></span>
<span id="cb54-67">      pred_prepared_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prepare_for_quantify_prediction_per_TSS(predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prediction_avg, gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene, tss_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tss_dataframe)</span>
<span id="cb54-68">      tss_predictions_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quantify_prediction_per_TSS(low_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> window_coords.start, TSS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_prepared_avg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_TSS'</span>], cage_predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_prepared_avg[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cage_predictions'</span>])</span>
<span id="cb54-69"></span>
<span id="cb54-70">      temp_list.append(tss_predictions_avg) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># results here are a dictionary for each TSS for each haplotype</span></span>
<span id="cb54-71"></span>
<span id="cb54-72">      individual_results[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp_list <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save for the individual</span></span>
<span id="cb54-73"></span>
<span id="cb54-74">    gene_output[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individual_results</span>
<span id="cb54-75">    gene_predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individual_prediction</span>
<span id="cb54-76"></span>
<span id="cb54-77">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>([gene_output, gene_predictions])</span>
<span id="cb54-78"></span>
<span id="cb54-79"></span></code></pre></div>
</div>
<p>Function to download chromosome bed files and read chromosomes dataframes.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">chrom_bed_downloads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://uchicago.box.com/shared/static/du77wf31li38tciv8imivwu57svae03p.csv"</span>)</span>
<span id="cb55-2">chrom_bed_downloads.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chrom_bed_downloads[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chroms"</span>]</span>
<span id="cb55-3"></span>
<span id="cb55-4">chrom_bed_downloads.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">chroms</th>
<th data-quarto-table-cell-role="th">link</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">chroms</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>https://uchicago.box.com/shared/static/9q9n4a0...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>https://uchicago.box.com/shared/static/1tk6a3f...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>https://uchicago.box.com/shared/static/77ldwqq...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>https://uchicago.box.com/shared/static/s0g48al...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>5</td>
<td>https://uchicago.box.com/shared/static/yafgxb1...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">6</td>
<td>6</td>
<td>https://uchicago.box.com/shared/static/9vpxc7z...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">7</td>
<td>7</td>
<td>https://uchicago.box.com/shared/static/hkru0gi...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">8</td>
<td>8</td>
<td>https://uchicago.box.com/shared/static/ruac33s...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9</td>
<td>9</td>
<td>https://uchicago.box.com/shared/static/dfw6gkj...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">10</td>
<td>10</td>
<td>https://uchicago.box.com/shared/static/ek50gvt...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11</td>
<td>11</td>
<td>https://uchicago.box.com/shared/static/ryd5ipz...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">12</td>
<td>12</td>
<td>https://uchicago.box.com/shared/static/p9bno4m...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">13</td>
<td>13</td>
<td>https://uchicago.box.com/shared/static/9i3fmdv...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">14</td>
<td>14</td>
<td>https://uchicago.box.com/shared/static/bkbrfph...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">15</td>
<td>15</td>
<td>https://uchicago.box.com/shared/static/1mxbg84...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">16</td>
<td>16</td>
<td>https://uchicago.box.com/shared/static/9bpr7eq...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">17</td>
<td>17</td>
<td>https://uchicago.box.com/shared/static/43equgq...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">18</td>
<td>18</td>
<td>https://uchicago.box.com/shared/static/tla8jhz...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">19</td>
<td>19</td>
<td>https://uchicago.box.com/shared/static/3wh7bsx...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">20</td>
<td>20</td>
<td>https://uchicago.box.com/shared/static/rh8r8s2...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">21</td>
<td>21</td>
<td>https://uchicago.box.com/shared/static/o9f6kt3...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">22</td>
<td>22</td>
<td>https://uchicago.box.com/shared/static/6wgvugh...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="41">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> download_chrom_beds(chromosome, genes, downloads_table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chrom_bed_downloads):</span>
<span id="cb56-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb56-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Downloads bed/variation files for a chromosome and list of genes</span></span>
<span id="cb56-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb56-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#change all the below path info before /data (home/sd04/enformer) according to the pwd</span></span>
<span id="cb56-6"></span>
<span id="cb56-7">  link <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> downloads_table.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(chromosome), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"link"</span>]</span>
<span id="cb56-8">  chr_which <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chromosome</span>
<span id="cb56-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes:</span>
<span id="cb56-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/grand/TFXcan/imlab/users/srusti/enformer/data/individual_beds/chr'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chromosome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/chr'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chromosome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.bed'</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the file is in the folder, no need to download again</span></span>
<span id="cb56-11">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb56-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>curl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>L {link} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>grand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>TFXcan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>imlab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>users<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>srusti<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>enformer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>chr_{chromosome}_bed.tar.gz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> cd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>grand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>TFXcan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>imlab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>users<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>srusti<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>enformer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> tar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>zxf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>grand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>TFXcan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>imlab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>users<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>srusti<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>enformer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>chr_{chromosome}_bed.tar.gz .<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>individual_beds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>{chr_which}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>{chr_which}_{gene}.bed</span>
<span id="cb56-13"></span>
<span id="cb56-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove the download tar.gz file</span></span>
<span id="cb56-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>grand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>TFXcan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>imlab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>users<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>srusti<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>enformer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>chr_{chromosome}_bed.tar.gz</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">download_chrom_beds(chromosome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"17"</span>, genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GSDMB'</span>])<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#, 'MED24', 'ORMDL3', 'IKZF3'])</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="43">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">chr17_tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/grand/TFXcan/imlab/users/srusti/enformer/data/tss_by_chr/chr17_tss_by_gene.txt'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<p>Run prediction on 10 individuals with averaged haplotypes.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="44">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">asthma_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GSDMB'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our gene of interest</span></span>
<span id="cb59-2"></span>
<span id="cb59-3">rand_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA11992'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA19235'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA20770'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HG00232'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HG00342'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA20502'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA19189'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HG00108'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HG00380'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA12872'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># individuals we are interested in</span></span>
<span id="cb59-4"></span>
<span id="cb59-5">asthma_chromosomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'17'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the gene is on chromosome 17</span></span>
<span id="cb59-6"></span>
<span id="cb59-7">chr17_tss_dfs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [chr17_tss] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we use the TSS information</span></span></code></pre></div>
</div>
<p>Check if individuals are present in the chromosome 17 file.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="45">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_individuals(path_to_bed_file, list_of_individuals):</span>
<span id="cb60-2"></span>
<span id="cb60-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb60-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Checks if an individual is missing in bed variation files.</span></span>
<span id="cb60-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  These individuals should be removed prior to training</span></span>
<span id="cb60-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb60-7"></span>
<span id="cb60-8">  myfile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path_to_bed_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb60-9">  myline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> myfile.readline()</span>
<span id="cb60-10">  bed_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> myline.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:]</span>
<span id="cb60-11">  myfile.close()</span>
<span id="cb60-12"></span>
<span id="cb60-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(list_of_individuals).issubset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(bed_names)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>:</span>
<span id="cb60-14">    missing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(list_of_individuals).difference(bed_names))</span>
<span id="cb60-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This (or these) individual(s) is/are not present: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(missing))</span>
<span id="cb60-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb60-17">    missing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb60-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'All individuals are present in the bed file.'</span>)</span>
<span id="cb60-19"></span>
<span id="cb60-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(missing)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="46">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">missing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_individuals(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/srusti/enformer/data/individual_beds/chr17/chr17_IKZF3.bed"</span>, list_of_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_individuals)</span>
<span id="cb61-2">missing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_individuals(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/srusti/enformer/data/individual_beds/chr17/chr17_GSDMB.bed"</span>, list_of_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_individuals)</span>
<span id="cb61-3">missing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_individuals(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/srusti/enformer/data/individual_beds/chr17/chr17_MED24.bed"</span>, list_of_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_individuals)</span>
<span id="cb61-4">missing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_individuals(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/srusti/enformer/data/individual_beds/chr17/chr17_ORMDL3.bed"</span>, list_of_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_individuals)</span>
<span id="cb61-5"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>All individuals are present in the bed file.
All individuals are present in the bed file.
All individuals are present in the bed file.
All individuals are present in the bed file.</code></pre>
</div>
</div>
<p>Collect individuals we want to predict for.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="47">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> collect_intervals(chromosomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"22"</span>], gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb63-2"></span>
<span id="cb63-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb63-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters :</span></span>
<span id="cb63-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      chromosomes : a list of chromosome numbers; each element should be a string format</span></span>
<span id="cb63-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      gene_list : a list of genes; the genes should be located on those chromosomes</span></span>
<span id="cb63-7"></span>
<span id="cb63-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns :</span></span>
<span id="cb63-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      A dictionary of genes (from gene_list) and their intervals within their respective chromosomes</span></span>
<span id="cb63-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb63-11"></span>
<span id="cb63-12">  gene_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collect intervals for our genes of interest</span></span>
<span id="cb63-13"></span>
<span id="cb63-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> chrom <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chromosomes:</span>
<span id="cb63-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/srusti/enformer/data/gene_chroms/gene_"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chrom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> chrom_genes:</span>
<span id="cb63-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chrom_genes:</span>
<span id="cb63-17">        split_line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.strip().split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb63-18">        gene_intervals[split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb63-19">                                          split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb63-20">                                          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]),</span>
<span id="cb63-21">                                          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb63-22">                                        ]</span>
<span id="cb63-23"></span>
<span id="cb63-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the user has supplied a list of genes they are interested in</span></span>
<span id="cb63-25">    use_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>((k, gene_intervals[k]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_intervals)</span>
<span id="cb63-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(use_genes)</span>
<span id="cb63-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)):</span>
<span id="cb63-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(gene_intervals)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="48">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">asthma_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_intervals(chromosomes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>asthma_chromosomes, gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>asthma_genes) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># here, we collect the intervals for that gene</span></span>
<span id="cb64-2">asthma_intervals</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>{'GSDMB': ['17', 38060848, 38077313]}</code></pre>
</div>
</div>
<p>More specific predictions functions from original hackathon code.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="49">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> prepare_for_quantify_prediction_per_TSS(predictions, gene, tss_df):</span>
<span id="cb66-2"></span>
<span id="cb66-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb66-4"></span>
<span id="cb66-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters:</span></span>
<span id="cb66-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          predicitions (A numpy array): All predictions from the track</span></span>
<span id="cb66-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          gene (a gene name, character): a gene</span></span>
<span id="cb66-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          tss_df: a list of dataframe of genes and their transcription start sites</span></span>
<span id="cb66-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns:</span></span>
<span id="cb66-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          A dictionary of cage experiment predictions and a list of transcription start sites</span></span>
<span id="cb66-11"></span>
<span id="cb66-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb66-13"></span>
<span id="cb66-14">  output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb66-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tdf <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tss_df:</span>
<span id="cb66-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tdf.genes.values:</span>
<span id="cb66-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb66-18">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tdf[tdf.genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene].txStart_Sites.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>).values</span>
<span id="cb66-19">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [t.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_tss_list]</span>
<span id="cb66-20">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(item) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> nestedlist <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_tss_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nestedlist]</span>
<span id="cb66-21">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(gene_tss_list))</span>
<span id="cb66-22">  output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cage_predictions'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a numpy array</span></span>
<span id="cb66-23">  output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_TSS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_tss_list <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a list</span></span>
<span id="cb66-24"></span>
<span id="cb66-25"></span>
<span id="cb66-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(output) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a dictionary</span></span>
<span id="cb66-27"></span>
<span id="cb66-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> quantify_prediction_per_TSS(low_range, TSS, cage_predictions):</span>
<span id="cb66-29"></span>
<span id="cb66-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb66-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters:</span></span>
<span id="cb66-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          low_range (int): The lower interval</span></span>
<span id="cb66-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          TSS (list of integers): A list of TSS for a gene</span></span>
<span id="cb66-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          cage_predictions: A 1D numpy array or a vector of predictions from enformer corresponding to track 5110 or CAGE predictions</span></span>
<span id="cb66-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns:</span></span>
<span id="cb66-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          A dictionary of gene expression predictions for each TSS for a gene</span></span>
<span id="cb66-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb66-38">  tss_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb66-39">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tss <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> TSS:</span>
<span id="cb66-40">    bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> low_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">320</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb66-41">    count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb66-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tss:</span>
<span id="cb66-43">      bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb66-44">      count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb66-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(cage_predictions)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb66-46">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb66-47">    cage_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cage_predictions[count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cage_predictions[count] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cage_predictions[count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb66-48">    tss_predictions[tss] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cage_preds</span>
<span id="cb66-49"></span>
<span id="cb66-50">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(tss_predictions)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="50">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">pred_hapl_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_hapavg_predictions(gene_intervals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>asthma_intervals, tss_dataframe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chr17_tss_dfs, individuals_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rand_individuals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Currently on gene GSDMB, and predicting on individual NA11992...
Currently on gene GSDMB, and predicting on individual NA19235...
Currently on gene GSDMB, and predicting on individual NA20770...
Currently on gene GSDMB, and predicting on individual HG00232...
Currently on gene GSDMB, and predicting on individual HG00342...
Currently on gene GSDMB, and predicting on individual NA20502...
Currently on gene GSDMB, and predicting on individual NA19189...
Currently on gene GSDMB, and predicting on individual HG00108...
Currently on gene GSDMB, and predicting on individual HG00380...
Currently on gene GSDMB, and predicting on individual NA12872...</code></pre>
</div>
</div>
</section>
<section id="regular-enformer-predictions-individual-haplotype-predictions" class="level2">
<h2 class="anchored" data-anchor-id="regular-enformer-predictions-individual-haplotype-predictions">Regular Enformer Predictions (individual haplotype predictions)</h2>
<p>The regular run_predictions functions outputs the predictions for each haplotype and puts each in a list (without averaging it), which is why it produces double the amount of values as your avg_run_predictions function. Use the regular run_predictions and then average them.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="51">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(gene_intervals, tss_dataframe, individuals_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb69-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb69-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters :</span></span>
<span id="cb69-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    gene_intervals : the results from calling `collect_intervals`</span></span>
<span id="cb69-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tss_dataframe : a list of the TSSs dataframes i.e. the TSS for the genes in the chromosomes</span></span>
<span id="cb69-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    individuals_list : a list of individuals on which we want to make predictions; defaults to None</span></span>
<span id="cb69-7"></span>
<span id="cb69-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns :</span></span>
<span id="cb69-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A list of predictions; the first element is the predictions around the TSS for each gene. The second is the prediction across CAGE tracks</span></span>
<span id="cb69-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb69-11"></span>
<span id="cb69-12">  gene_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb69-13">  gene_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb69-14"></span>
<span id="cb69-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_intervals.keys():</span>
<span id="cb69-16">    gene_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_intervals[gene]</span>
<span id="cb69-17">    target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb69-18">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb69-19">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creates an interval to select the right sequences</span></span>
<span id="cb69-20">    target_fa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extracts the fasta sequences, and resizes such that it is compatible with the sequence_length</span></span>
<span id="cb69-21">    window_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_interval.resize(SEQUENCE_LENGTH) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we also need information about the start and end locations after resizing</span></span>
<span id="cb69-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb69-23">      cur_gene_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/srusti/enformer/data/individual_beds/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read in the appropriate bed file for the gene</span></span>
<span id="cb69-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span>:</span>
<span id="cb69-25">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb69-26">    individual_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb69-27">    individual_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb69-28"></span>
<span id="cb69-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(np.empty([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))):</span>
<span id="cb69-30">      use_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals_list</span>
<span id="cb69-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)):</span>
<span id="cb69-32">      use_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cur_gene_vars.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:]</span>
<span id="cb69-33"></span>
<span id="cb69-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> use_individuals:</span>
<span id="cb69-35">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Currently on gene </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, and predicting on individual </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(gene, individual))</span>
<span id="cb69-36">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># two haplotypes per individual</span></span>
<span id="cb69-37">      haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb69-38">      haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb69-39"></span>
<span id="cb69-40">      ref_mismatch_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb69-41">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur_gene_vars.iterrows():</span>
<span id="cb69-42"></span>
<span id="cb69-43">        geno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[individual].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb69-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(haplo_2):</span>
<span id="cb69-45">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb69-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb69-47">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb69-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb69-49">          haplo_1[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb69-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb69-51">          haplo_2[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb69-52"></span>
<span id="cb69-53">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict on the individual's two haplotypes</span></span>
<span id="cb69-54">      prediction_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_1))[np.newaxis])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb69-55">      prediction_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_2))[np.newaxis])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb69-56">      prediction_sep_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (prediction_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> prediction_2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb69-57"></span>
<span id="cb69-58">      temp_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_sep_avg[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CAGE predictions we are interested in</span></span>
<span id="cb69-59">      individual_prediction[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp_predictions</span>
<span id="cb69-60"></span>
<span id="cb69-61">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate TSS CAGE expression which correspond to column 5110 of the predictions above</span></span>
<span id="cb69-62">      temp_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb69-63"></span>
<span id="cb69-64">      pred_sep_avg_prepared <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prepare_for_quantify_prediction_per_TSS(predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prediction_sep_avg, gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene, tss_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tss_dataframe)</span>
<span id="cb69-65">      tss_pred_sep_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quantify_prediction_per_TSS(low_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> window_coords.start, TSS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_sep_avg_prepared[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_TSS'</span>], cage_predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_sep_avg_prepared[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cage_predictions'</span>])</span>
<span id="cb69-66"></span>
<span id="cb69-67">      temp_list.append(tss_pred_sep_avg) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># results here are a dictionary for each TSS for the average haplotype</span></span>
<span id="cb69-68"></span>
<span id="cb69-69">      individual_results[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp_list <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save for the individual</span></span>
<span id="cb69-70"></span>
<span id="cb69-71">    gene_output[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individual_results</span>
<span id="cb69-72">    gene_predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individual_prediction</span>
<span id="cb69-73"></span>
<span id="cb69-74">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>([gene_output, gene_predictions])</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="52">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">pred_hapl_sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(gene_intervals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>asthma_intervals, tss_dataframe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chr17_tss_dfs, individuals_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rand_individuals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Currently on gene GSDMB, and predicting on individual NA11992...
Currently on gene GSDMB, and predicting on individual NA19235...
Currently on gene GSDMB, and predicting on individual NA20770...
Currently on gene GSDMB, and predicting on individual HG00232...
Currently on gene GSDMB, and predicting on individual HG00342...
Currently on gene GSDMB, and predicting on individual NA20502...
Currently on gene GSDMB, and predicting on individual NA19189...
Currently on gene GSDMB, and predicting on individual HG00108...
Currently on gene GSDMB, and predicting on individual HG00380...
Currently on gene GSDMB, and predicting on individual NA12872...</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="53">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"></span>
<span id="cb72-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Iterable</span>
<span id="cb72-3"></span>
<span id="cb72-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_all_values(d):</span>
<span id="cb72-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(d, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb72-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> d.values():</span>
<span id="cb72-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> get_all_values(v)</span>
<span id="cb72-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(d, Iterable) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(d, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or list, set, ... only</span></span>
<span id="cb72-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> d:</span>
<span id="cb72-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> get_all_values(v)</span>
<span id="cb72-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb72-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> d </span>
<span id="cb72-13"></span>
<span id="cb72-14">values_avg_hapl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(get_all_values(pred_hapl_avg))</span>
<span id="cb72-15">values_sep_hapl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(get_all_values(pred_hapl_sep))</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="54">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(values_avg_hapl))</span>
<span id="cb73-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(values_sep_hapl))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>9090
9090</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="55">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">plt.scatter(values_avg_hapl, values_sep_hapl)</span>
<span id="cb75-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Averaged Haplotype"</span>)</span>
<span id="cb75-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Separate Haplotype"</span>)</span>
<span id="cb75-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer Predictions: Two Haplotypes vs Averaged Haplotype"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>Text(0.5, 1.0, 'Enformer Predictions: Two Haplotypes vs Averaged Haplotype')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/2023-07-19-katenproj/enf_proj_partone_files/figure-html/cell-56-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="56">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#calculate correlation coefficient for above plot</span></span>
<span id="cb77-2"></span>
<span id="cb77-3">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.corrcoef(values_avg_hapl, values_sep_hapl)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb77-4">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.around(r, decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb77-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(corr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.99999</code></pre>
</div>
</div>
<p>The correlation is extremely close to 1, indicating that the predictions for an averaged haplotype and two separate haplotypes are pretty much the same.</p>
</section>
<section id="prepare-input-data" class="level2">
<h2 class="anchored" data-anchor-id="prepare-input-data">Prepare Input Data</h2>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="57">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">geuvadis_gene_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://uchicago.box.com/shared/static/5vwc7pjw9qmtv7298c4rc7bcuicoyemt.gz'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb79-2">                                         dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chr'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>})</span>
<span id="cb79-3">geuvadis_gene_expression.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">gene_id</th>
<th data-quarto-table-cell-role="th">gene_name</th>
<th data-quarto-table-cell-role="th">TargetID</th>
<th data-quarto-table-cell-role="th">Chr</th>
<th data-quarto-table-cell-role="th">Coord</th>
<th data-quarto-table-cell-role="th">HG00096</th>
<th data-quarto-table-cell-role="th">HG00097</th>
<th data-quarto-table-cell-role="th">HG00099</th>
<th data-quarto-table-cell-role="th">HG00100</th>
<th data-quarto-table-cell-role="th">HG00101</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">NA20810</th>
<th data-quarto-table-cell-role="th">NA20811</th>
<th data-quarto-table-cell-role="th">NA20812</th>
<th data-quarto-table-cell-role="th">NA20813</th>
<th data-quarto-table-cell-role="th">NA20814</th>
<th data-quarto-table-cell-role="th">NA20815</th>
<th data-quarto-table-cell-role="th">NA20816</th>
<th data-quarto-table-cell-role="th">NA20819</th>
<th data-quarto-table-cell-role="th">NA20826</th>
<th data-quarto-table-cell-role="th">NA20828</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>ENSG00000223972.4</td>
<td>DDX11L1</td>
<td>ENSG00000223972.4</td>
<td>1</td>
<td>11869</td>
<td>0.320818</td>
<td>0.344202</td>
<td>0.354225</td>
<td>0.478064</td>
<td>-0.102815</td>
<td>...</td>
<td>1.008605</td>
<td>0.384489</td>
<td>0.581284</td>
<td>0.513981</td>
<td>0.667449</td>
<td>0.350890</td>
<td>0.186103</td>
<td>-0.037976</td>
<td>0.405439</td>
<td>0.199143</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>ENSG00000227232.3</td>
<td>WASH7P</td>
<td>ENSG00000227232.3</td>
<td>1</td>
<td>29806</td>
<td>33.714457</td>
<td>20.185174</td>
<td>18.095407</td>
<td>24.100871</td>
<td>29.018719</td>
<td>...</td>
<td>30.980194</td>
<td>34.086207</td>
<td>39.678442</td>
<td>29.643513</td>
<td>27.120420</td>
<td>29.121624</td>
<td>31.117198</td>
<td>32.047074</td>
<td>22.798959</td>
<td>23.563874</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>ENSG00000243485.1</td>
<td>MIR1302-11</td>
<td>ENSG00000243485.1</td>
<td>1</td>
<td>29554</td>
<td>0.240408</td>
<td>0.157456</td>
<td>0.218806</td>
<td>0.320878</td>
<td>0.067833</td>
<td>...</td>
<td>0.065940</td>
<td>0.228784</td>
<td>0.140642</td>
<td>0.283905</td>
<td>0.273821</td>
<td>0.286311</td>
<td>0.324060</td>
<td>0.049574</td>
<td>0.255288</td>
<td>0.157440</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>ENSG00000238009.2</td>
<td>RP11-34P13.7</td>
<td>ENSG00000238009.2</td>
<td>1</td>
<td>133566</td>
<td>0.328272</td>
<td>0.327932</td>
<td>0.090064</td>
<td>0.420443</td>
<td>0.220269</td>
<td>...</td>
<td>0.274071</td>
<td>0.384179</td>
<td>0.533693</td>
<td>0.307221</td>
<td>0.307367</td>
<td>0.400278</td>
<td>0.612321</td>
<td>0.666633</td>
<td>0.281138</td>
<td>1.346129</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>ENSG00000239945.1</td>
<td>RP11-34P13.8</td>
<td>ENSG00000239945.1</td>
<td>1</td>
<td>91105</td>
<td>0.332171</td>
<td>-0.032164</td>
<td>0.017323</td>
<td>0.424677</td>
<td>0.214025</td>
<td>...</td>
<td>0.347323</td>
<td>0.346744</td>
<td>0.073580</td>
<td>0.400396</td>
<td>0.470517</td>
<td>0.069749</td>
<td>0.299353</td>
<td>0.090019</td>
<td>0.282554</td>
<td>-0.157170</td>
</tr>
</tbody>
</table>

<p>5 rows × 467 columns</p>
</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="58">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">gene_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_intervals(chromosomes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'17'</span>], gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GSDMB'</span>])</span>
<span id="cb80-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(gene_intervals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'GSDMB': ['17', 38060848, 38077313]}</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="59">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Enformer(model_path) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># here we load the model architecture.</span></span>
<span id="cb82-2"></span>
<span id="cb82-3">fasta_extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastaStringExtractor(fasta_file) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we define a class called fasta_extractor to help us extra raw sequence data</span></span></code></pre></div>
</div>
</section>
<section id="predicting-separated-haplotype-and-averages-haplotype-across-tracks" class="level2">
<h2 class="anchored" data-anchor-id="predicting-separated-haplotype-and-averages-haplotype-across-tracks">Predicting Separated Haplotype and Averages Haplotype Across Tracks</h2>
<p>Pick one individual at random.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="60">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">rand_individual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># individuals we are interested in</span></span>
<span id="cb83-2">rand_individual</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>'NA20507'</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="61">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GSDMB'</span></span>
<span id="cb85-2">gene_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_intervals[gene]</span>
<span id="cb85-3">target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb85-4">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb85-5">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb85-6">target_fa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH))</span>
<span id="cb85-7">window_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_interval.resize(SEQUENCE_LENGTH)</span>
<span id="cb85-8">cur_gene_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/srusti/enformer/data/individual_beds/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read in the appropriate bed file for the gene</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="62">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> geno_to_seq(gene, individual):</span>
<span id="cb86-2">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># two haplotypes per individual</span></span>
<span id="cb86-3">  haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb86-4">  haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb86-5"></span>
<span id="cb86-6">  ref_mismatch_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb86-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur_gene_vars.iterrows():</span>
<span id="cb86-8"></span>
<span id="cb86-9">    geno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[individual].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb86-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(haplo_2):</span>
<span id="cb86-11">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb86-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb86-13">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb86-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb86-15">      haplo_1[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb86-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb86-17">      haplo_2[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb86-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> haplo_1, haplo_2</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="63">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">haplo_1, haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geno_to_seq(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GSDMB'</span>, rand_individual)</span>
<span id="cb87-2"></span>
<span id="cb87-3">haplo_1_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_1))[np.newaxis]</span>
<span id="cb87-4">haplo_2_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_2))[np.newaxis]</span>
<span id="cb87-5">average_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.add(haplo_1_enc, haplo_2_enc) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="64">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">prediction_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(haplo_1_enc)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb88-2">prediction_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(haplo_2_enc)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb88-3"></span>
<span id="cb88-4">pre_average <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(average_enc)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb88-5">post_average <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (prediction_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> prediction_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="65">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb89-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5313</span>):</span>
<span id="cb89-3">    pre_track <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pre_average[:, i]</span>
<span id="cb89-4">    post_track <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post_average[:, i]</span>
<span id="cb89-5">    corr_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.corrcoef(pre_track, post_track)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb89-6">    res.append(corr_all)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}" data-execution_count="66">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(res), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(res))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.9909548473158399 0.9999998617710296</code></pre>
</div>
</div>
<p>The results from both methods are nearly identical across all tracks.</p>


</section>

 ]]></description>
  <guid>https://www.srustillmblog.io/posts/2023-07-19-katenproj/enf_proj_partone.html</guid>
  <pubDate>Thu, 20 Jul 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Linear Regression &amp; Data Analysis Basics</title>
  <dc:creator>Srusti Donapati</dc:creator>
  <link>https://www.srustillmblog.io/posts/practice_analysis/diabetes_analysis.html</link>
  <description><![CDATA[ 




<p>Resources for basic data analysis using python, and conducting a linear regression. Will be using a diabetes dataset.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library used for working with arrays</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library used for data manipulation and analysis</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library for visualization</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library for visualization</span></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to suppress warnings</span></span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-11">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#read csv dataset</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">pima <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diabetes.csv"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load and reads the csv file</span></span>
<span id="cb2-4">pima</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Pregnancies</th>
<th data-quarto-table-cell-role="th">Glucose</th>
<th data-quarto-table-cell-role="th">BloodPressure</th>
<th data-quarto-table-cell-role="th">SkinThickness</th>
<th data-quarto-table-cell-role="th">Insulin</th>
<th data-quarto-table-cell-role="th">BMI</th>
<th data-quarto-table-cell-role="th">DiabetesPedigreeFunction</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">Outcome</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>6</td>
<td>148</td>
<td>72</td>
<td>35</td>
<td>0</td>
<td>33.6</td>
<td>0.627</td>
<td>50</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>85</td>
<td>66</td>
<td>29</td>
<td>0</td>
<td>26.6</td>
<td>0.351</td>
<td>31</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>8</td>
<td>183</td>
<td>64</td>
<td>0</td>
<td>0</td>
<td>23.3</td>
<td>0.672</td>
<td>32</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1</td>
<td>89</td>
<td>66</td>
<td>23</td>
<td>94</td>
<td>28.1</td>
<td>0.167</td>
<td>21</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0</td>
<td>137</td>
<td>40</td>
<td>35</td>
<td>168</td>
<td>43.1</td>
<td>2.288</td>
<td>33</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">763</td>
<td>10</td>
<td>101</td>
<td>76</td>
<td>48</td>
<td>180</td>
<td>32.9</td>
<td>0.171</td>
<td>63</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">764</td>
<td>2</td>
<td>122</td>
<td>70</td>
<td>27</td>
<td>0</td>
<td>36.8</td>
<td>0.340</td>
<td>27</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">765</td>
<td>5</td>
<td>121</td>
<td>72</td>
<td>23</td>
<td>112</td>
<td>26.2</td>
<td>0.245</td>
<td>30</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">766</td>
<td>1</td>
<td>126</td>
<td>60</td>
<td>0</td>
<td>0</td>
<td>30.1</td>
<td>0.349</td>
<td>47</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">767</td>
<td>1</td>
<td>93</td>
<td>70</td>
<td>31</td>
<td>0</td>
<td>30.4</td>
<td>0.315</td>
<td>23</td>
<td>0</td>
</tr>
</tbody>
</table>

<p>768 rows × 9 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># finds the number of columns in the dataset</span></span>
<span id="cb3-2">total_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pima.axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Columns: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(total_cols))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of Columns: 9</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#first 10 rows</span></span>
<span id="cb5-2">pima.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Pregnancies</th>
<th data-quarto-table-cell-role="th">Glucose</th>
<th data-quarto-table-cell-role="th">BloodPressure</th>
<th data-quarto-table-cell-role="th">SkinThickness</th>
<th data-quarto-table-cell-role="th">Insulin</th>
<th data-quarto-table-cell-role="th">BMI</th>
<th data-quarto-table-cell-role="th">DiabetesPedigreeFunction</th>
<th data-quarto-table-cell-role="th">Age</th>
<th data-quarto-table-cell-role="th">Outcome</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>6</td>
<td>148</td>
<td>72</td>
<td>35</td>
<td>0</td>
<td>33.6</td>
<td>0.627</td>
<td>50</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>85</td>
<td>66</td>
<td>29</td>
<td>0</td>
<td>26.6</td>
<td>0.351</td>
<td>31</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>8</td>
<td>183</td>
<td>64</td>
<td>0</td>
<td>0</td>
<td>23.3</td>
<td>0.672</td>
<td>32</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1</td>
<td>89</td>
<td>66</td>
<td>23</td>
<td>94</td>
<td>28.1</td>
<td>0.167</td>
<td>21</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0</td>
<td>137</td>
<td>40</td>
<td>35</td>
<td>168</td>
<td>43.1</td>
<td>2.288</td>
<td>33</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>5</td>
<td>116</td>
<td>74</td>
<td>0</td>
<td>0</td>
<td>25.6</td>
<td>0.201</td>
<td>30</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>3</td>
<td>78</td>
<td>50</td>
<td>32</td>
<td>88</td>
<td>31.0</td>
<td>0.248</td>
<td>26</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>10</td>
<td>115</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>35.3</td>
<td>0.134</td>
<td>29</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>2</td>
<td>197</td>
<td>70</td>
<td>45</td>
<td>543</td>
<td>30.5</td>
<td>0.158</td>
<td>53</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>8</td>
<td>125</td>
<td>96</td>
<td>0</td>
<td>0</td>
<td>0.0</td>
<td>0.232</td>
<td>54</td>
<td>1</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Outcomes here represents whether someone has diabetes (1) or not (0).</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#number of rows in dataset</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># finds the number of rows in the dataset</span></span>
<span id="cb6-4">total_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pima.axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb6-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Rows: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(total_rows))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of Rows: 768</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The dimension of the DataFrame is: '</span>, pima.ndim)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The dimension of the DataFrame is:  2</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#size of the dataset (how many elements)</span></span>
<span id="cb10-2"></span>
<span id="cb10-3">pima.size</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>6912</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#The info() function is used to print a concise summary of a DataFrame.</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#This method prints information about a DataFrame including the index dtype and column dtypes, non-null values and memory usage.</span></span>
<span id="cb12-3"></span>
<span id="cb12-4">pima.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 768 entries, 0 to 767
Data columns (total 9 columns):
 #   Column                    Non-Null Count  Dtype  
---  ------                    --------------  -----  
 0   Pregnancies               768 non-null    int64  
 1   Glucose                   768 non-null    int64  
 2   BloodPressure             768 non-null    int64  
 3   SkinThickness             768 non-null    int64  
 4   Insulin                   768 non-null    int64  
 5   BMI                       768 non-null    float64
 6   DiabetesPedigreeFunction  768 non-null    float64
 7   Age                       768 non-null    int64  
 8   Outcome                   768 non-null    int64  
dtypes: float64(2), int64(7)
memory usage: 54.1 KB</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#functions that return a boolean value indicating whether the passed in argument value is in fact missing data.</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is an example of chaining methods</span></span>
<span id="cb14-3"></span>
<span id="cb14-4">pima.isnull().values.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>False</code></pre>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#it can also output if there is any missing values each of the columns</span></span>
<span id="cb16-2"></span>
<span id="cb16-3">pima.isnull().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>Pregnancies                 False
Glucose                     False
BloodPressure               False
SkinThickness               False
Insulin                     False
BMI                         False
DiabetesPedigreeFunction    False
Age                         False
Outcome                     False
dtype: bool</code></pre>
</div>
</div>
<p>Now let’s do a summary of the statistics!</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">pima.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Outcome</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">763</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">764</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">765</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">766</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">767</td>
<td>0</td>
</tr>
</tbody>
</table>

<p>768 rows × 1 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#excludes the outcome column </span></span>
<span id="cb19-2">pima.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Pregnancies</th>
<th data-quarto-table-cell-role="th">Glucose</th>
<th data-quarto-table-cell-role="th">BloodPressure</th>
<th data-quarto-table-cell-role="th">SkinThickness</th>
<th data-quarto-table-cell-role="th">Insulin</th>
<th data-quarto-table-cell-role="th">BMI</th>
<th data-quarto-table-cell-role="th">DiabetesPedigreeFunction</th>
<th data-quarto-table-cell-role="th">Age</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>768.000000</td>
<td>768.000000</td>
<td>768.000000</td>
<td>768.000000</td>
<td>768.000000</td>
<td>768.000000</td>
<td>768.000000</td>
<td>768.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>3.845052</td>
<td>120.894531</td>
<td>69.105469</td>
<td>20.536458</td>
<td>79.799479</td>
<td>31.992578</td>
<td>0.471876</td>
<td>33.240885</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>3.369578</td>
<td>31.972618</td>
<td>19.355807</td>
<td>15.952218</td>
<td>115.244002</td>
<td>7.884160</td>
<td>0.331329</td>
<td>11.760232</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.078000</td>
<td>21.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>1.000000</td>
<td>99.000000</td>
<td>62.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>27.300000</td>
<td>0.243750</td>
<td>24.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>3.000000</td>
<td>117.000000</td>
<td>72.000000</td>
<td>23.000000</td>
<td>30.500000</td>
<td>32.000000</td>
<td>0.372500</td>
<td>29.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>6.000000</td>
<td>140.250000</td>
<td>80.000000</td>
<td>32.000000</td>
<td>127.250000</td>
<td>36.600000</td>
<td>0.626250</td>
<td>41.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>17.000000</td>
<td>199.000000</td>
<td>122.000000</td>
<td>99.000000</td>
<td>846.000000</td>
<td>67.100000</td>
<td>2.420000</td>
<td>81.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Slay &lt;3</p>
<p>From the results we can make out a few insights: The pregnancy numbers appear to be normally distributed whereas the others seem to be rightly skewed. (The mean and std deviation of pregnancies are more or less the same as opposed to the others). Highest glucose levels is 199, pregnancies 17 and BMI 67.</p>
<p>Now to the fun part.</p>
<section id="data-visualization" class="level2">
<h2 class="anchored" data-anchor-id="data-visualization"><strong>Data Visualization</strong></h2>
<p>Plotting a distribution plot for variable ‘Blood Pressure’.</p>
<p>displot() function which is used to visualize a distribution of the univariate variable. This function uses matplotlib to plot a histogram and fit a kernel density estimate (KDE).</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">sns.displot(pima[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BloodPressure'</span>], kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kde'</span>) </span>
<span id="cb20-2">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/practice_analysis/diabetes_analysis_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p><strong>What is the BMI of the person having the highest glucose?</strong></p>
<p>Max() method finds the highest value.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">pima[pima[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Glucose'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>pima[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Glucose'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BMI'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>661    42.9
Name: BMI, dtype: float64</code></pre>
</div>
</div>
<p>The person with the highest glucose value (661) has a bmi of 42.9</p>
<p><strong>Finding Measures of Central Tendency (the mean,median, and mode) </strong></p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean </span></span>
<span id="cb23-2">m1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pima[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BMI'</span>].mean() </span>
<span id="cb23-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(m1) </span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># median </span></span>
<span id="cb23-6">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pima[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BMI'</span>].median() </span>
<span id="cb23-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(m2)</span>
<span id="cb23-8"></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mode  </span></span>
<span id="cb23-10">m3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pima[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BMI'</span>].mode()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] </span>
<span id="cb23-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(m3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>31.992578124999998
32.0
32.0</code></pre>
</div>
</div>
<p>Studying the correlation between glucose and insulin using a Scatter Plot.</p>
<p>A scatter plot is a set of points plotted on horizontal and vertical axes. The scatter plot can be used to study the correlation between the two variables. One can also detect the extreme data points using a scatter plot.</p>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Glucose'</span>,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BloodPressure'</span>,data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pima)</span>
<span id="cb25-2">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/practice_analysis/diabetes_analysis_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Now, to do a linear regression.</p>
<p>Linear regression is a statistical technique used to model the relationship between a dependent variable and one or more independent variables. It assumes a linear relationship between the variables, meaning that the change in the dependent variable is directly proportional to the change in the independent variable(s). The goal of linear regression is to find the best-fit line that minimizes the distance between the observed data points and the predicted values on the line. This line can then be used to make predictions or understand the impact of the independent variable(s) on the dependent variable.</p>
<p>Thus, linear regressions can only be done with numerical variables (for example, glucose levels or skin thickness).</p>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span></code></pre></div>
</div>
<p>Here, we conduct a linear regression using glucose levels as the independent variable (x) and insulin as the dependent variable (y).</p>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"></span>
<span id="cb27-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pima[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Glucose'</span>]</span>
<span id="cb27-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pima[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BloodPressure'</span>]</span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a constant column for the intercept term</span></span>
<span id="cb27-6">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.add_constant(X)</span>
<span id="cb27-7"></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and fit the linear regression model</span></span>
<span id="cb27-9">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(y, X)</span>
<span id="cb27-10">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span>
<span id="cb27-11"></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the summary of the regression results</span></span>
<span id="cb27-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(results.summary())</span>
<span id="cb27-14"></span>
<span id="cb27-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make predictions</span></span>
<span id="cb27-16">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results.predict(X)</span>
<span id="cb27-17"></span>
<span id="cb27-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Access the coefficients</span></span>
<span id="cb27-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Coefficients: "</span>, results.params)</span>
<span id="cb27-20"></span>
<span id="cb27-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data points and the line of best fit</span></span>
<span id="cb27-22">plt.scatter(X[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Glucose'</span>], y, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Data Points'</span>)</span>
<span id="cb27-23">plt.plot(X[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Glucose'</span>], y_pred, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Line of Best Fit'</span>)</span>
<span id="cb27-24">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Glucose'</span>)</span>
<span id="cb27-25">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blood Pressure'</span>)</span>
<span id="cb27-26">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linear Regression'</span>)</span>
<span id="cb27-27">plt.legend()</span>
<span id="cb27-28">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                            OLS Regression Results                            
==============================================================================
Dep. Variable:          BloodPressure   R-squared:                       0.023
Model:                            OLS   Adj. R-squared:                  0.022
Method:                 Least Squares   F-statistic:                     18.26
Date:                Mon, 03 Jul 2023   Prob (F-statistic):           2.17e-05
Time:                        16:05:01   Log-Likelihood:                -3355.8
No. Observations:                 768   AIC:                             6716.
Df Residuals:                     766   BIC:                             6725.
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P&gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------
const         57.9377      2.703     21.433      0.000      52.631      63.244
Glucose        0.0924      0.022      4.273      0.000       0.050       0.135
==============================================================================
Omnibus:                      318.039   Durbin-Watson:                   1.961
Prob(Omnibus):                  0.000   Jarque-Bera (JB):             1397.465
Skew:                          -1.903   Prob(JB):                    3.50e-304
Kurtosis:                       8.403   Cond. No.                         489.
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
Coefficients:  const      57.937746
Glucose     0.092376
dtype: float64</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/practice_analysis/diabetes_analysis_files/figure-html/cell-19-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="what-about-a-logistic-regression" class="level2">
<h2 class="anchored" data-anchor-id="what-about-a-logistic-regression">What about a logistic regression?</h2>
<p>Use a logistic regression when exploring For the diabetes dataset, you would use logistic regression because the values are binary (they are not just 0 and 1). More to come on this in a future blog post!</p>


</section>

 ]]></description>
  <category>blog</category>
  <guid>https://www.srustillmblog.io/posts/practice_analysis/diabetes_analysis.html</guid>
  <pubDate>Mon, 10 Jul 2023 05:00:00 GMT</pubDate>
  <media:content url="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62413fa0-3d80-411c-af93-ebd0f096a26a_1042x644.png" medium="image" type="image/png"/>
</item>
<item>
  <title>How to Extract a DNA Sequence Centered at a Specific Locus</title>
  <dc:creator>Srusti Donapati</dc:creator>
  <link>https://www.srustillmblog.io/posts/DNA-locus-extraction/index.html</link>
  <description><![CDATA[ 




<p>Using a DNA sequence, researchers often want to predict something (e.g.&nbsp;gene expression, TF binding, histone modification, etc) at a specific locus (“location” on the genome) relevant to a particular trait or phenotype. For example, my project will be examining histone modifications at the 17q locus, which is the most significant locus for asthma (the part of the genome which is most influential, genetically, on the asthma condition). To accomplish this, it is important to know how extract from a full DNA sequence (which is 3 billion nucleotides long) the relevant locus.</p>
<p>You can use the following function to extract a DNA sequence at a specific locus center (in Python):</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FastaStringExtractor:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, fasta_file):</span>
<span id="cb1-3">        <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyfaidx</span>
<span id="cb1-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyfaidx.Fasta(fasta_file)</span>
<span id="cb1-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._chromosome_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.items()}</span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, interval, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb1-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Truncate interval if it extends beyond the chromosome lengths.</span></span>
<span id="cb1-8">        <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq</span>
<span id="cb1-9">        chromosome_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._chromosome_sizes[interval.chrom]</span>
<span id="cb1-10">        trimmed_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(interval.chrom,</span>
<span id="cb1-11">                                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval.start, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb1-12">                                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(interval.end, chromosome_length),</span>
<span id="cb1-13">                                    )</span>
<span id="cb1-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyfaidx wants a 1-based interval</span></span>
<span id="cb1-15">        sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.get_seq(trimmed_interval.chrom,</span>
<span id="cb1-16">                                            trimmed_interval.start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-17">                                            trimmed_interval.stop).seq).upper()</span>
<span id="cb1-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill truncated values with N's.</span></span>
<span id="cb1-19">        pad_upstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>interval.start, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-20">        pad_downstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval.end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> chromosome_length, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pad_upstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pad_downstream</span>
<span id="cb1-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> close(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.close()</span></code></pre></div>
</div>
<p>Credits for the function: Saideep Gona @ Im Lab at UChicago</p>
<p>You will need the pyfaidx and kipoiseq packages to use the function:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install pyfaidx </span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install kipoiseq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5.2</span></span></code></pre></div>
</div>
<p>To use this function (after you have defined it), first create an instance of the FastaStringExtractor object, providing a fasta file you want to use. This fasta file is going to contain the full DNA sequence which you want to extract from:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">fasta_extractor_object <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastaStringExtractor(fasta_file)</span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#you should have defined the path of your fasta file and assigned it to some variable before this</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>NameError: name 'fasta_file' is not defined</code></pre>
</div>
</div>
<p>Then, create an interval you want to extract the sequence from using kipoiseq (“.resize” will resize the interval you provide to a length provided by “sequence_length”. The new interval will be centered on the “start”,“end” you provided originally):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(chrom,start,end).resize(sequence_length)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>NameError: name 'kipoiseq' is not defined</code></pre>
</div>
</div>
<p>Then, create an interval you want to extract the sequence from using kipoiseq (“.resize” will resize the interval you provide to a length provided by “sequence_length”. The new interval will be centered on the “start”,“end” you provided originally):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(chrom,start,end).resize(sequence_length)</span></code></pre></div>
</div>
<p>Finally, extract the sequence using the extractor object like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">extracted_sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fasta_extractor_object.extract(target_interval)</span></code></pre></div>
</div>
<p>That’s it!</p>



 ]]></description>
  <category>blog</category>
  <guid>https://www.srustillmblog.io/posts/DNA-locus-extraction/index.html</guid>
  <pubDate>Mon, 10 Jul 2023 05:00:00 GMT</pubDate>
  <media:content url="https://www.genome.gov/sites/default/files/tg/en/illustration/acgt.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neural Networks Code and Explanation</title>
  <dc:creator>Srusti </dc:creator>
  <link>https://www.srustillmblog.io/posts/neural_networks/index.html</link>
  <description><![CDATA[ 




<p>Import the necessary packages. Also import the iris dataset, which we will be using to train the neural network. The iris dataset is a widely-known, relatively small dataset which can be used to train this simple neural network.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#torch is an open source ML library used for creating deep neural networks</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn  </span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader, Dataset</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_iris <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#scikit-learn is a data analysis library for machine learning</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneHotEncoder <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#converts categorical variables into a numerical format that can be used by ML algorithms</span></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<p>The iris dataset contains categorical variables (attributes are sepal length, sepal width, petal length, petal width), which is why we import OneHotEncoder. OneHotEncoder will allow us to preprocess the data from the iris dataset by converting the categorical attributes to numerical formats so that the neural network can understand it.</p>
<p>Before getting into the code, here is a conceptual outline of a neural network architecture:</p>
<p>A neural network has three main components: input layer, hidden layers, output layer.</p>
<ol type="1">
<li><p>Input layer: where the neural network receives data represented as numbers.</p></li>
<li><p>Hidden layers: layers of the neural network; intermediate processing steps where the model extracts and learns complex patterns and features from the input data. Within the hidden layers, an activation function introduces non-linearities, allowing the network to capture complex relationships and make more sophisticated predictions.</p></li>
</ol>
<p>Each hidden layer can capture different levels of abstraction, with earlier layers learning simple features and later layers combining them to learn more complex patterns. The number of hidden layers and the number of neurons within each layer can be adjusted based on the complexity of the problem at hand. By adding more hidden layers, the neural network can learn increasingly abstract representations of the data.</p>
<ol start="3" type="1">
<li>Output layer: where the final prediction or output based on the computations performed by the hidden layers is provided.</li>
</ol>
<p>Many people think of neural networks as this mysterious black box which just predicts information. To more concretely understand what’s going on, here is a more detailed explanation what happens when you put input data through a neural network:</p>
<p>Input data is put into neural networks, and neural networks are a just a collection of nested functions. These functions are defined by parameters (consisting of weights and biases).</p>
<p>Think of weights as the knobs that control how much attention the neural network should pay to each feature. For example, for a neural network which classifies the fruit in images of various fruits, if the weight for the color feature is high, it means that the network considers color to be more important in the prediction. Conversely, if the weight is low, the network assigns less importance to that feature. During the training phase of a neural network, these weights are adjusted based on the input data and the desired output.</p>
<p>Biases provide the neural network with the ability to make predictions even when all the input features are zero or missing. In our fruit example, biases can be thought of as an inherent inclination of the neural network to lean towards predicting one fruit over the other, regardless of the input values. They act as an additional input to each neuron in the network and help in adjusting the output of the neuron.</p>
<p>The parameters (weights and biases) are stored in tensors. Tensors are PyTorch’s version of arrays and matrices.</p>
<p>The entire process of running the input data through each of the NN’s functions to make its best guess about the correct output is known as a forward propagation, or forward pass.</p>
<p>During training, after a forward pass, the NN goes through backward propagation: in backprop, the NN adjusts its parameters proportionate to the error in its guess. This error (known as the “loss”) is the mathematical difference between what the NN predicted and the correct answer (called the “ground truth”). The NN does this by traversing backwards from the output, back into each of the layers, collecting the derivatives of the error with respect to the parameters of the functions (parameters are like settings that control how the NN works).</p>
<p>Once the network knows how each parameter affects the error with those derivatives (called “gradients”), it can update the parameters in a way that reduces the error. This updating process is called “gradient descent.” It adjusts the parameters step by step, using the information from the gradients, to make the network better at making predictions.</p>
<p>By repeating this process with many examples and adjusting the parameters based on the gradients, the network gradually improves its performance and becomes better at making accurate predictions.</p>
<p>Now, to the code!</p>
<p>The following code defines the neural network:</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#defining neural network</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MyNeural(nn.Module):</span>
<span id="cb2-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, hidden_layers, output):</span>
<span id="cb2-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Linear(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, hidden_layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hlayers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.ModuleDict(</span>
<span id="cb2-8">            {<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"hL</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>: torch.nn.Linear(hidden_layers[i], hidden_layers[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(hidden_layers) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)}</span>
<span id="cb2-9">        )</span>
<span id="cb2-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.outputLayer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Linear(hidden_layers[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], output)</span>
<span id="cb2-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sigmoid()</span>
<span id="cb2-12"></span>
<span id="cb2-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb2-14">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inputLayer(x))</span>
<span id="cb2-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name, layer <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hlayers.items():</span>
<span id="cb2-16">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(layer(x))</span>
<span id="cb2-17">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.outputLayer(x)</span>
<span id="cb2-18">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sig(x)</span>
<span id="cb2-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> y</span></code></pre></div>
</div>
<p>Explanation of above code, line by line:</p>
<ol type="1">
<li><p>When using PyTorch, which is a machine learning framework based on the Torch library, like we are here, you need to create a sub-class within the nn.Module and implement your neural network architecture within it. The name of our sub-class, our neural network architecture, is MyNeural.</p></li>
<li><p>Initialize the MyNeural class. The initialization method takes in an input, which is the dimensions of the input layer, dimensions of the hidden layers, and dimensions of the output layer of the neural network. For example, in the iris dataset, the input layer will be 4 because there are 4 attributes: sepal length, sepal width, petal length, petal width (note: do not count the ‘species’ category as one of the attributes because that is what we are trying to predict with this dataset, so it should not be an input).</p></li>
<li><p>This line calls the initialization method of the parent class (nn.Module). It ensures that the necessary setup is done before defining the architecture of the custom neural network.</p></li>
<li><p>This line creates the input layer of the neural network using the torch.nn.Linear class. It specifies that the input layer has “input” number of input features and outputs “hidden_layers[0]” number of neurons.</p></li>
</ol>
<p>This linear layer performs a linear transformation on the input data (an oversimplified explanation: takes the input data, factors in weights and biases of the network, and turns the data into the values of the neuron within the network). The .Linear method creates fully connected layers, where each neuron is connected to every neuron in the previous layer (see diagram at start of blog).</p>
<ol start="5" type="1">
<li><p>This line creates the hidden layers of the neural network using the torch.nn.Linear class. It creates a ModuleDict object named hlayers, which is a dictionary-like structure that holds the hidden layers. It uses a dictionary comprehension to iterate over the range of len(hidden_layers) - 1 and creates a linear layer for each hidden layer. The keys of the dictionary are formatted as hLi, where i is the index of the hidden layer, and the corresponding value is the linear layer itself. Each linear layer specifies the number of input and output features for the corresponding hidden layer.</p></li>
<li><p>This line creates the output layer of the neural network using the torch.nn.Linear class. It specifies that the output layer has hidden_layers[-1] number of input features (the output size of the last hidden layer) and output number of output features (neurons).</p></li>
<li><p>Sigmoid is an activation function (here we are defining the output function), which will introduce non-linearity and allow the network to capture complex relationships and make more sophisticated predictions. This line creates an instance of the nn.Sigmoid class and assigns it to the variable self.sig.</p></li>
<li><p>Declares the forward method of the class, which takes x as the input data. The forward methos is used for a “forward pass,” which is the process of inputting data into the neural network, propagating it forwards, through the hidden layers, and producing an output inference/prediction from the output layer.</p></li>
<li><p>This line applies the ReLU (Rectified Linear Unit) activation function to the input data x after passing it through the self.inputLayer linear layer. The F.relu function is a shorthand for applying the ReLU activation function element-wise. In specific, reLu is an activation function which takes any number you put into it (from the hidden layers), and if any of those numbers is negative, it turns them into positive, and if they are positive, it retains it. The reason for this is to promote efficiency and reduce the computational load of the network by focusing on relevant features and reducing redundant computations</p></li>
<li><p>This line starts a loop over the hidden layers of the neural network. It iterates through the self.hlayers dictionary, which holds the hidden layers of the network.</p></li>
<li><p>Inside the loop, this line applies the ReLU activation function to the intermediate results obtained by passing the data x through each hidden layer (layer). The ReLU activation function introduces non-linearity to the network. The ReLu function needs to be applied after EVERY hidden layer in order to ensure complex patterns are understood by the model, which is why we are iterating through each hidden layer using a for loop.</p></li>
<li><p>After the loop, this line applies the output layer (self.outputLayer) to the intermediate results (x). The output layer typically performs a linear transformation on the data without applying an activation function.</p></li>
<li><p>This line applies the sigmoid activation function (self.s) to the output of the neural network (x). The sigmoid function squeezes the output values between 0 and 1, often used for binary classification or probability estimation. There are many types of activation functions, but Sigmoid is used for predicting probabilities in datasets with attributes that are categorical, like the iris dataset (e.g.&nbsp;sepal width, petal length, etc.)</p></li>
<li><p>This line returns the final output y from the forward method (produces the output after a forward pass).</p></li>
</ol>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">iris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.load_iris()</span>
<span id="cb3-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris.data <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#assigning data (data represents features)</span></span>
<span id="cb3-3">target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris.target <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#assigning target (which are class labels)</span></span></code></pre></div>
</div>
<p>Here, we the iris dataset.</p>
<p>We assign the data part of the Iris dataset to the variable data. iris.data represents the features or input variables. It is a two-dimensional array-like object where each row corresponds to a sample (flower) and each column represents a specific feature (sepal length, sepal width, petal length, petal width). After executing this line, the variable data will hold the feature data from the Iris dataset.</p>
<p>Next, assign the target part of the Iris dataset. iris.target represents the class labels, which are the species of flower. Labels are like the ground truth or the correct answers that the neural network learns to predict. By providing labels during the training phase, the network learns to associate specific patterns or features in the input data with the corresponding labels. The class labels in the Iris dataset are encoded as integers, where 0 represents setosa, 1 represents versicolor, and 2 represents virginica. After executing this line, the variable target will hold the class label data from the Iris dataset.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">trainD, testD, trainT, testT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(data, target, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>) </span>
<span id="cb4-2"></span>
<span id="cb4-3">tTrainD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.from_numpy(trainD).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#training data</span></span>
<span id="cb4-4">tTrainT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.from_numpy(trainT).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#training targets</span></span>
<span id="cb4-5">tTestD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.from_numpy(testD).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#testing data</span></span>
<span id="cb4-6">tTestT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.from_numpy(testT).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#testing targets</span></span></code></pre></div>
</div>
<p>Before explaining the above chunk, let’s go through the process of how a neural network is trained and tested.</p>
<p>After loading the dataset, we split the data into train, test, and validation sections (validation is just another test). So, the training will be done on one subset of the data, but the testing will be done on a different subset of the data (but within the same dataset). Doing this allows the model to use the complex relationships and patterns it identified from the training data to predict on different test data.</p>
<p>In the first line of code above, we are splitting the dataset into training and test sets (for simplification purposes, we are not splitting it into validation too), and specifying the training and testing targets (species) within the dataset as well. test_size = 0.1 ensures that 10% of the data is allocated for testing. random_state is just some arbitrary parameter that, when set again at the same value, will ensure the same exact random splits in data are used (in case you want to retest the neural network with the same splits of the dataset into test and training groups).</p>
<p>The next provided code converts the NumPy arrays representing training and testing data and targets that we made in the first line of code into PyTorch tensors. Tensors are PyTorch’s version of arrays and matrices.</p>
<p>This conversion allows for seamless integration with PyTorch and enables further processing, manipulation, and training of neural networks using the converted tensors. The .float() and .long() methods are used to ensure the appropriate data types for the tensors based on the nature of the data (float for input features (numerical data like sepal and petal length) and long for labels or targets (flower species label)).</p>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#creating custom dataset object</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> myDataset():</span>
<span id="cb5-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#initialize by putting in the dataset, which is 1 million by 4 attributes for iris </span></span>
<span id="cb5-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb5-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#pytorch will look at the length (the number of rows) in dataset</span></span>
<span id="cb5-8">        length_ml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(length_ml)</span>
<span id="cb5-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># says how to I source one training item and return it back to you, and the next time you call this function,</span></span>
<span id="cb5-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#it is going to select a different training item (keeping the training items it already used in its memory)</span></span>
<span id="cb5-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x[idx, :], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y[idx])</span></code></pre></div>
</div>
<p>The first four lines in the above code define a custom dataset class myDataset in PyTorch. The class encapsulates the input features (self.x) and labels (self.y) of the iris dataset into a single object, which helps organize and manage your data in a structured manner, making it easier to work with and reducing the risk of errors or data inconsistencies.</p>
<p>The next 3 lines of code (def <strong>len</strong>(self) …) provide methods to determine the length of the dataset. These methods are called by PyTorch to determine the length of the dataset, i.e., the number of samples in the dataset.</p>
<p>The last two lines of code (def <strong>getitem</strong>(self, idx) …) retrieve individual samples by index. The <strong>getitem</strong> method allows you to define how individual samples are accessed from the dataset. This customization is valuable when you need to implement specific data preprocessing or transformations before feeding the data into the neural network.</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">trainDataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> myDataset(tTrainD, tTrainT)</span>
<span id="cb6-2">trainDataset</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>&lt;__main__.myDataset at 0x12edbcd10&gt;</code></pre>
</div>
</div>
<p>By passing tTrainD (training data) and tTrainT (training targets) as arguments, you are initializing the trainDataset object with the corresponding data and targets in preparation for training.</p>
<p>Explanation of the process of training neural networks:</p>
<p>When training a neural network, the process of splitting the data into batches is an essential step that enables efficient training. Instead of processing the entire dataset at once, the data is divided into smaller subsets called batches. Each batch contains a fixed number of samples, and the network is updated based on the gradients computed from the predictions and the corresponding targets within the batch.</p>
<p>The process of training a neural network with batching typically involves the following steps:</p>
<p>Data Loading: The training dataset is loaded, either as a whole or through a data loader object, which provides access to the data in batches. The data loader takes care of shuffling, batching, and any necessary preprocessing.</p>
<p>Mini-batch Iteration: The training data is divided into mini-batches, each containing a predefined number of samples (specified by the batch size). The network will process one mini-batch at a time.</p>
<p>Forward Pass: For each mini-batch, the input data is fed forward through the network. The network computes predictions for the samples in the mini-batch.</p>
<p>Loss Computation: The predictions from the forward pass are compared to the corresponding target values (labels) for the samples in the mini-batch. This comparison generates a loss value, which quantifies the error between the predicted outputs and the true targets.</p>
<p>Backward Pass and Parameter Update: The loss is used to compute gradients with respect to the network parameters. The gradients indicate the direction and magnitude of the updates required to minimize the loss. The gradients are backpropagated through the network using the chain rule of derivatives. The network’s parameters are then updated using an optimization algorithm (e.g., gradient descent or its variants) based on these gradients.</p>
<p>Iteration: Steps 3 to 5 are repeated for each mini-batch in the training data. This process is typically performed for multiple epochs, where an epoch refers to one complete pass through the entire training dataset. The network updates its parameters after each mini-batch, gradually improving its performance over the epochs.</p>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(trainDataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-2">train_loader</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>&lt;torch.utils.data.dataloader.DataLoader at 0x14c9dbe90&gt;</code></pre>
</div>
</div>
<p>trainDataset: This is the dataset object that you want to load using the data loader. It should be an instance of a PyTorch dataset class. We already defined trainDataset st chunk of code using the myDataset custom object we created.</p>
<p>batch_size: Specifies the number of samples to load in each batch. In this case, each batch will contain 8 samples.</p>
<p>shuffle: If set to True, the data loader will shuffle the samples before each epoch (a complete iteration over the dataset). Shuffling the data helps in randomizing the order of the samples and can improve the model’s training performance.</p>
<p>Essentially, the training examples are split into groups called “batches”. This allows the dataset to be “loaded” into the network, or processed, in more manageable, smaller chunks. Those batches then produce some output values, get backpropagated, and each and every batch individually goes through the NN in each epoch. An epoch is one pass through your entire training data. So if there are 30 epochs, you are training 30 times.</p>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#naming the neural network and setting dimensions of layers</span></span>
<span id="cb10-2">myNN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyNeural(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb10-3">myNN</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>MyNeural(
  (inputLayer): Linear(in_features=4, out_features=5, bias=True)
  (hlayers): ModuleDict(
    (hL0): Linear(in_features=5, out_features=6, bias=True)
    (hL1): Linear(in_features=6, out_features=7, bias=True)
    (hL2): Linear(in_features=7, out_features=6, bias=True)
  )
  (outputLayer): Linear(in_features=6, out_features=4, bias=True)
  (sig): Sigmoid()
)</code></pre>
</div>
</div>
<p>In the above code, for the neural network model ‘MyNeural’ which we defined earlier:</p>
<p>We set 4 input features (4 because of the number attributes of the iris dataset: sepal width, sepal length, petal width, and petal length). The 4 input features produce 5 features (aka 5 neurons) in the first hidden layer, 6 neurons in the second hidden layer, 7 in the third, 6 in the fourth, and finally output 4 features as a prediction. So, the values in the list [5, 6, 7, 6] assign the number of neurons in each hidden layer, and the length of the list corresponds to the number of hidden layers. Here, there are 4 hidden layers. These dimensions for MyNeural are all assigned to myNN – which becomes the name of the specific neural network.</p>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.SGD(myNN.parameters(), lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb12-2">lossfunction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span></code></pre></div>
</div>
<p>Based on the gradients computed by backpropagation, an optimizer is an algorithm or method used to adjust the parameters of the model during the training process in order to minimize the loss (to produce a more accurate prediction). In the above code, we are initializing an optimizer object (opt) of type Stochastic Gradient Descent (SGD). It takes two arguments:</p>
<p>myNN.parameters(): This specifies the parameters of your neural network model (myNN) that will be optimized during training. The optimizer will update these parameters based on the computed gradients. lr=0.01: This sets the learning rate for the optimizer. The learning rate determines the step size taken during optimization, influencing how quickly the model learns and converges.</p>
<p>Even though we used the SGD optimizer here, there other examples of optimizers including Adam, RMSprop, Adagrad, etc., all of which have their own strengths and weaknesses.</p>
<p>The loss function calculates the discrepancy between the predicted outputs and the ground truth labels, providing a measure of the model’s performance during training. The CrossEntropyLoss() function from torch.nn is commonly used for multi-class classification tasks, like the classification of species that we are doing with the iris dataset.</p>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#training loop for an NN model</span></span>
<span id="cb13-2"></span>
<span id="cb13-3">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb13-4">train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-5">test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb13-8">    myNN.train()</span>
<span id="cb13-9">    running_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-10">    dt_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, (batchX, batchY) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(train_loader): </span>
<span id="cb13-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#batchY represents target (actual) labels corresponding to input data batch (batchX)</span></span>
<span id="cb13-13">        opt.zero_grad()</span>
<span id="cb13-14">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> myNN(batchX)</span>
<span id="cb13-15">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lossfunction(output, batchY)</span>
<span id="cb13-16">        loss.backward()</span>
<span id="cb13-17">        opt.step()</span>
<span id="cb13-18">        running_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> batchX.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb13-19">        dt_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> batchX.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb13-20">    train_loss.append(running_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dt_size)</span>
<span id="cb13-21"></span>
<span id="cb13-22">    myNN.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb13-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb13-24">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> myNN(tTestD) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#forward pass on testing data subset</span></span>
<span id="cb13-25">        l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lossfunction(p, tTestT) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#loss calculation</span></span>
<span id="cb13-26">        test_loss.append(l.item())</span></code></pre></div>
</div>
<p>The above code essentially iterates over the training data, performs forward and backward passes, updates the model parameters, and calculates and stores the training and testing loss for each epoch.</p>
<p>An explanation of the code, line by line:</p>
<ul>
<li><p><code>num_epochs = 1000</code>: This variable indicates the number of training epochs, specifying how many times the entire dataset will be iterated (repeatedly ran through the NN) during training.</p></li>
<li><p><code>train_loss</code> and <code>test_loss</code> are empty lists that will store the training and testing loss values for each epoch, respectively, within the for loop later.</p></li>
<li><p>The loop <code>for epoch in range(num_epochs):</code> iterates over the specified number of epochs.</p></li>
<li><p><code>myNN.train()</code> sets the neural network model (<code>myNN</code>) in training mode.</p></li>
<li><p><code>running_loss</code> and <code>dt_size</code> variables are initialized to track the cumulative loss and the total size of the training dataset.</p></li>
<li><p>The inner loop <code>for i, (batchX, batchY) in enumerate(train_loader):</code> iterates over the batches of data from the training data loader (<code>train_loader</code>). The enumerate(train_loader) part adds an index counter (i) to each batch returned by the train_loader. This means that as you iterate over the batches in the train_loader, you also have access to the index or position of the current batch. The index counter (i) starts from 0 and increments by 1 for each batch in the train_loader. It allows you to keep track of the progress and index of the current batch within the training loop.</p></li>
<li><p><code>opt.zero_grad()</code> clears the gradients of the optimizer before calculating the new gradients after every batch. This is VERY important to include because during backpropagation, gradients are calculated and stored for each parameter of the model. If the gradients are not cleared, they would accumulate from one iteration to the next. This would result in incorrect gradient values and lead to incorrect updates of the model parameters. Many people forget it!</p></li>
<li><p><code>output = myNN(batchX)</code> computes the forward pass of the neural network model on the current batch of inputs (<code>batchX</code>).</p></li>
<li><p><code>loss = lossfunction(output, batchY)</code> calculates the loss between the predicted outputs and the actual labels (<code>batchY</code>) using the specified loss function (<code>lossfunction</code>).</p></li>
<li><p><code>loss.backward()</code> performs backpropagation, computing the gradients of the model’s parameters with respect to the loss.</p></li>
<li><p><code>opt.step()</code> updates the model’s parameters by taking an optimization step using the optimizer (<code>opt</code>).</p></li>
<li><p><code>running_loss += loss.item() * batchX.size(0)</code> and <code>dt_size += batchX.size(0)</code> accumulate the loss and the size of the current batch for later calculation of the average loss.</p></li>
<li><p><code>train_loss.append(running_loss / dt_size)</code> calculates and stores the average training loss for the current epoch.</p></li>
<li><p><code>myNN.eval()</code> switches the model to evaluation mode. During the training phase of a neural network, the model undergoes iterations to learn from the training data and update its parameters. However, when it comes to evaluating the model’s performance on a validation or test set, it is important to ensure that the model behaves differently compared to the training phase. This is where the evaluation mode comes into play.</p></li>
<li><p><code>with torch.no_grad():</code> ensures that no gradients are computed during the following evaluation phase.</p></li>
<li><p><code>p = myNN(tTestD)</code> performs the forward pass of the model on the testing dataset (<code>tTestD</code>) to obtain the predicted outputs.</p></li>
<li><p><code>l = lossfunction(p, tTestT)</code> calculates the loss between the predicted outputs and the testing labels (<code>tTestT</code>).</p></li>
<li><p><code>test_loss.append(l.item())</code> stores the testing loss for the current epoch.</p></li>
</ul>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plotting loss with training and testing the NN</span></span>
<span id="cb14-2"></span>
<span id="cb14-3">plt.plot(train_loss, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train loss'</span>)</span>
<span id="cb14-4">plt.plot(test_loss, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test loss'</span>)</span>
<span id="cb14-5">plt.legend()</span>
<span id="cb14-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epochs"</span>)</span>
<span id="cb14-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loss"</span>)</span>
<span id="cb14-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Testing and Training Loss for NN"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>Text(0.5, 1.0, 'Testing and Training Loss for NN')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/neural_networks/index_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#testing NN</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Testing:"</span>)</span>
<span id="cb16-4">opt.zero_grad()</span>
<span id="cb16-5">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> myNN(tTestD)</span>
<span id="cb16-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tTestD.shape)</span>
<span id="cb16-7">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lossfunction(output, tTestT)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Testing:
torch.Size([15, 4])</code></pre>
</div>
</div>
<p>Overall, the code snippet performs a forward pass of the neural network model on the testing data, prints the shape of the testing data, and calculates the loss between the predicted outputs and the target labels. This can be useful for evaluating the performance of the model on the testing data after training.</p>
<p>Printing the shape of the testing data is crucial as it allows for data verification, debugging, and input size considerations. It helps ensure that the testing data matches the expected input shape for the neural network model. Additionally, it provides insights into the number of samples and dimensions, which is vital for designing and configuring the model. Checking the data shape ensures that preprocessing steps have been correctly applied.</p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#analyzing and printing results for one epoch</span></span>
<span id="cb18-2"></span>
<span id="cb18-3">predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output:</span>
<span id="cb18-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> row.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:</span>
<span id="cb18-6">        predictions.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> row.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb18-8">        predictions.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb18-10">        predictions.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb18-11">tPreds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(predictions).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-12">tTargets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tTestT.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-13"></span>
<span id="cb18-14">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([tPreds,tTargets], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb18-16">correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> result:</span>
<span id="cb18-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb18-19">        correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-20"></span>
<span id="cb18-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(correct)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[1, 1],
        [0, 0],
        [1, 2],
        [1, 1],
        [1, 1],
        [0, 0],
        [1, 1],
        [1, 2],
        [1, 1],
        [1, 1],
        [1, 2],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0]])
12</code></pre>
</div>
</div>
<p>The above code snippet is not necessary but can be helpful to understand the accuracy of the model’s prediction. The code snippet calculates the predicted labels based on the output tensor, compares them with the target labels, and prints the resulting tensor as well as the number of correct predictions.</p>



 ]]></description>
  <category>blog</category>
  <guid>https://www.srustillmblog.io/posts/neural_networks/index.html</guid>
  <pubDate>Wed, 28 Jun 2023 05:00:00 GMT</pubDate>
  <media:content url="https://www.investopedia.com/thmb/PgHPmalVUUHIQrp616mTdlmyD0I=/750x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/dotdash_Final_Neural_Network_Apr_2020-01-5f4088dfda4c49d99a4d927c9a3a5ba0.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>GWAS Code</title>
  <dc:creator>Srusti Donapati</dc:creator>
  <link>https://www.srustillmblog.io/posts/population-stratification/index.html</link>
  <description><![CDATA[ 




<section id="genome-wide-association-study-gwas" class="level2">
<h2 class="anchored" data-anchor-id="genome-wide-association-study-gwas">Genome-Wide Association Study (GWAS)</h2>
<p>GWAS is a genome-wide association study. It observes the differences in genes by a scanning the genomes of a large number of individuals to identify genetic markers, such as single nucleotide polymorphisms (SNPs), that are associated with a specific trait or condition.</p>
<p>The process of conducting a GWAS typically involves comparing the genomes of individuals with a particular trait or disease to those without the trait or disease (known as the reference genome – a genome widely agreed upon scientists in the field to be the “control” genome in which other genomes are compared). By identifying genetic markers that are more frequently present in the group with the trait or disease, researchers can infer potential associations between specific genetic variants and the trait of interest.These associations between genes and traits includes traits associated with a disease or condition.</p>
<p>However, it is important to note that GWAS findings often identify statistical associations between genetic markers and traits, rather than direct causal relationships. The inability to identify a direct causal relationship between genetic markers and traits in a GWAS is because most genetic variants do not change the coding of proteins (which carry out the cell’s functions, which can result in a specific trait).</p>
<p>Further research and functional studies are typically required to validate and understand the biological significance of these associations. However, GWAS is a good first-step in identifying genes highly associated with a trait in order to pursue next steps of causal identification.</p>
</section>
<section id="exploring-gwas-using-a-smaller-genomic-dataset." class="level2">
<h2 class="anchored" data-anchor-id="exploring-gwas-using-a-smaller-genomic-dataset.">Exploring GWAS using a smaller genomic dataset.</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.2     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.2     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(devtools)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: usethis</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source_gist</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"38431b74c6c0bf90c12f"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>ℹ Sourcing gist "38431b74c6c0bf90c12f"
ℹ SHA-1 hash of file is "7534a04652d34154de13d2fa2ac042adb0d1f564"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#downloading data</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Downloads/analysis_population_structure.tgz"</span>)))</span>
<span id="cb7-4">{</span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wget -O ~/Downloads/analysis_population_structure.tgz https://uchicago.box.com/shared/static/zv1jyevq01mt130ishx25sgb1agdu8lj.tgz"</span>))</span>
<span id="cb7-6">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## tar -xf file_name.tar.gz --directory /target/directory</span></span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tar xvf ~/Downloads/analysis_population_structure.tgz --directory ~/Downloads/"</span>)) </span>
<span id="cb7-8">}</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in system(glue::glue("wget -O
~/Downloads/analysis_population_structure.tgz
https://uchicago.box.com/shared/static/zv1jyevq01mt130ishx25sgb1agdu8lj.tgz")):
error in running command</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">work.dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Downloads/analysis_population_structure/"</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#testing Hardy-Weinberg Equilibrium with population structure</span></span>
<span id="cb10-2">popinfo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_tsv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(work.dir,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationships_w_pops_051208.txt"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 1301 Columns: 7
── Column specification ────────────────────────────────────────────────────────
Delimiter: "\t"
chr (5): FID, IID, dad, mom, population
dbl (2): sex, pheno

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">popinfo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(population)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 2
   population     n
   &lt;chr&gt;      &lt;int&gt;
 1 ASW           90
 2 CEU          180
 3 CHB           90
 4 CHD          100
 5 GIH          100
 6 JPT           91
 7 LWK          100
 8 MEX           90
 9 MKK          180
10 TSI          100
11 YRI          180</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">samdata <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_tsv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(work.dir,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phase3_corrected.psam"</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guess_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>)  </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 2504 Columns: 6
── Column specification ────────────────────────────────────────────────────────
Delimiter: "\t"
chr (5): #IID, PAT, MAT, SuperPop, Population
dbl (1): SEX

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">superpop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> samdata <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(SuperPop,Population) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>()</span>
<span id="cb16-2">superpop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(superpop, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SuperPop=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EAS"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HIS"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AFR"</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Population=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CHD"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MEX"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MKK"</span>)))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## what happens if we calculate HWE with this mixed population?</span></span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}output/allhwe.hwe"</span>)))</span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/bin/plink --bfile {work.dir}hapmapch22 --hardy --out {work.dir}output/allhwe"</span>))</span>
<span id="cb17-4">allhwe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}output/allhwe.hwe"</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.is=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb17-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(allhwe<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>P)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqunif</span>(allhwe<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>P,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HWE HapMap3 All Pop'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in qqunif(allhwe$P, main = "HWE HapMap3 All Pop"): thresholding p to
1e-30</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">pop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CHB"</span></span>
<span id="cb20-2">pop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CEU"</span></span>
<span id="cb20-3">pop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YRI"</span></span>
<span id="cb20-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(pop <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CHB"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CEU"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YRI"</span>))</span>
<span id="cb20-5">{</span>
<span id="cb20-6">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## what if we calculate with single population?</span></span>
<span id="cb20-7">  popinfo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(population<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>pop) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_tsv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path=</span>glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}{pop}.fam"</span>) )</span>
<span id="cb20-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}output/hwe-{pop}.hwe"</span>)))</span>
<span id="cb20-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/bin/plink --bfile {work.dir}hapmapch22 --hardy --keep {work.dir}{pop}.fam --out {work.dir}output/hwe-{pop}"</span>))</span>
<span id="cb20-11">  pophwe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}output/hwe-{pop}.hwe"</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.is=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb20-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(pophwe<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>P,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span>glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HWE {pop} and founders only"</span>))</span>
<span id="cb20-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqunif</span>(pophwe<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>P,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span>glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HWE {pop} and founders only"</span>))</span>
<span id="cb20-14">}</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The `path` argument of `write_tsv()` is deprecated as of readr 1.4.0.
ℹ Please use the `file` argument instead.</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-6-2.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-6-3.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-6-4.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-6-5.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-6-6.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#effect of population stratification on GWAS</span></span>
<span id="cb22-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## read igrowth</span></span>
<span id="cb22-3">igrowth <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_tsv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/hakyimlab/igrowth/master/rawgrowth.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## add FID to igrowth file</span></span>
<span id="cb23-2">igrowth <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> popinfo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pheno) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(igrowth <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(IID,growth), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IID"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IID"</span>))</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_tsv</span>(igrowth,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path=</span>glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}igrowth.pheno"</span>))</span>
<span id="cb23-4">igrowth <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(population,growth)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span>population)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha=</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 130 rows containing non-finite values (`stat_ydensity()`).</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 130 rows containing non-finite values (`stat_boxplot()`).</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(growth<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>population,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span>igrowth) )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = growth ~ population, data = igrowth)

Residuals:
   Min     1Q Median     3Q    Max 
-58821 -18093  -2242  15896  98760 

Coefficients:
              Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)    73080.8      938.2  77.894  &lt; 2e-16 ***
populationCEU  -2190.1     1175.4  -1.863   0.0625 .  
populationCHB   9053.1     2043.9   4.429 9.73e-06 ***
populationJPT   3476.8     2034.8   1.709   0.0876 .  
populationYRI  -7985.2     1137.2  -7.022 2.61e-12 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 24160 on 3591 degrees of freedom
  (130 observations deleted due to missingness)
Multiple R-squared:  0.0345,    Adjusted R-squared:  0.03342 
F-statistic: 32.08 on 4 and 3591 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## run plink linear regression only if it hasn't been run already</span></span>
<span id="cb28-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}output/igrowth.assoc.linear"</span>)))</span>
<span id="cb28-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/bin/plink --bfile {work.dir}hapmapch22 --linear --pheno {work.dir}igrowth.pheno --pheno-name growth --maf 0.05 --out {work.dir}output/igrowth"</span>))</span>
<span id="cb28-4">igrowth.assoc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}output/igrowth.assoc.linear"</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span>T,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.is=</span>T)</span>
<span id="cb28-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(igrowth.assoc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>P)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqunif</span>(igrowth.assoc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>P)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## install.packages("qqman")</span></span>
<span id="cb30-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(qqman)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>For example usage please run: vignette('qqman')</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Citation appreciated but not required:</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Turner, (2018). qqman: an R package for visualizing GWAS results using Q-Q and manhattan plots. Journal of Open Source Software, 3(25), 731, https://doi.org/10.21105/joss.00731.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">manhattan</span>(igrowth.assoc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chr=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CHR"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bp=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BP"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">snp=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SNP"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P"</span> )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## generate PCs using plink</span></span>
<span id="cb38-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}output/pca.eigenvec"</span>)))</span>
<span id="cb38-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/bin/plink --bfile {work.dir}hapmapch22 --pca --out {work.dir}output/pca"</span>))</span>
<span id="cb38-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## read plink calculated PCs</span></span>
<span id="cb38-5">pcplink <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}output/pca.eigenvec"</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span>F, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.is=</span>T)</span>
<span id="cb38-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(pcplink) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FID"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IID"</span>,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PC"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(pcplink)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))) )</span>
<span id="cb38-7">pcplink <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> popinfo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(superpop,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"population"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Population"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(pcplink, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FID"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IID"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IID"</span>))</span>
<span id="cb38-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## plot PC1 vs PC2</span></span>
<span id="cb38-9">pcplink <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(PC1,PC2,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span>population,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape=</span>SuperPop)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha=</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#running igrowth GWAS using PCs</span></span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}output/igrowth-adjPC.assoc.linear"</span>)))</span>
<span id="cb39-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/bin/plink --bfile {work.dir}hapmapch22 --linear --pheno {work.dir}igrowth.pheno --pheno-name growth --covar {work.dir}output/pca.eigenvec --covar-number 1-4 --hide-covar --maf 0.05 --out {work.dir}output/igrowth-adjPC"</span>))</span>
<span id="cb39-5">igrowth.adjusted.assoc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{work.dir}output/igrowth-adjPC.assoc.linear"</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span>T,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.is=</span>T)</span>
<span id="cb39-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##indadd = igrowth.adjusted.assoc$TEST=="ADD"</span></span>
<span id="cb39-7">titulo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"igrowh association adjusted for PCs"</span></span>
<span id="cb39-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(igrowth.adjusted.assoc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>P,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span>titulo)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqunif</span>(igrowth.adjusted.assoc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>P,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span>titulo)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.srustillmblog.io/posts/population-stratification/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section>

 ]]></description>
  <category>blog</category>
  <guid>https://www.srustillmblog.io/posts/population-stratification/index.html</guid>
  <pubDate>Tue, 13 Jun 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Practicing Working with Terminal</title>
  <dc:creator>Srusti Donapati</dc:creator>
  <link>https://www.srustillmblog.io/posts/command-line-skills/index.html</link>
  <description><![CDATA[ 




<section id="working-with-terminal-github-vscode" class="level1">
<h1>Working with Terminal ( + GitHub &amp; VSCode)</h1>
<p>The goal of this 8 week program is to be able to train an LLM to take in a full DNA sequence and predict some biological mechanism, such as gene expression or the effect of transcription factor binding. This can only be accomplished by using a supercomputer with many, many GPUs. These supercomputers will take in the training code from the terminal (or VSCode), which is why it is necessary to learn how to use VSCode and navigate the command line on the terminal of the laptop.</p>
<p>First, you need to ensure that your new file that you are working on is in the correct environment. An environment is kind of like a storage area on your laptop for all your programming tools (e.g.&nbsp;Python)– it’s basically like a folder for everything you need.</p>
<p><strong>Conda:</strong> Conda is an environment management tool which ensures that all your code, program, and files for a specific project are in the same environment. It also manages the installation, updating, and removal of packages (e.g.&nbsp;numpy, pandas, etc.). Conda comes with Anaconda and Miniconda, which you can download from the internet and have all the tools you would need to explore, model, and visualize datasets and more.</p>
<section id="make-a-new-environment" class="level3">
<h3 class="anchored" data-anchor-id="make-a-new-environment"><strong>Make a New Environment</strong></h3>
<p>Open terminal. Type the following, where “envname” is what you want to call your new environment:</p>
<p>conda create —name envname</p>
</section>
<section id="activate-newly-created-environment" class="level3">
<h3 class="anchored" data-anchor-id="activate-newly-created-environment">Activate Newly Created Environment</h3>
<p>Do this to enter your desired environment. Type the following, where “envname” is your environment name:</p>
<p>conda activate envname</p>
</section>
<section id="installing-tools-for-programming-in-python-within-new-environment" class="level3">
<h3 class="anchored" data-anchor-id="installing-tools-for-programming-in-python-within-new-environment">Installing Tools for Programming in Python within New Environment</h3>
<p>Type the following:</p>
<p>conda install python</p>
</section>
<section id="install-pip-before-installing-packages-for-python" class="level3">
<h3 class="anchored" data-anchor-id="install-pip-before-installing-packages-for-python">Install “pip” before installing packages for Python</h3>
<p>pip is is a package management system used to install and manage software packages written in Python. It is a command-line tool that comes bundled with Python installations.</p>
<p><strong>To install pip:</strong></p>
<p>conda install pip</p>
<p><strong>Note: Make sure you are in the desired environment while doing this.</strong></p>
<p>You can check that you are in that desired environment if the environment name is in the parenthesis before the remaining line of code produced by terminal. So, after you activate the environment, it should produce something like this:</p>
<p>(envname) Your-MacBook-Pro:~ macusername$</p>
<p>When you are in the “normal” default environment, it will look something like this:</p>
<p>(base) Your-MacBook-Pro:~ macusername$</p>
</section>
<section id="various-pip-commands" class="level3">
<h3 class="anchored" data-anchor-id="various-pip-commands">Various pip commands</h3>
<p>Here are some commonly used <strong><code>pip</code></strong> commands:</p>
<ul>
<li><strong><code>pip install package_name</code></strong>: Installs a package from PyPI or another source.</li>
</ul>
<p>**For example, for installing numpy: python -m pip install numpy</p>
<p>Note: The <strong><code>-m</code></strong> flag is commonly used for running Python scripts that are part of a package or when you want to ensure that the module is executed with the correct environment and dependencies.</p>
<ul>
<li><p><strong><code>pip uninstall package_name</code></strong>: Uninstalls a package.</p></li>
<li><p><strong><code>pip list</code></strong>: Lists installed packages.</p></li>
<li><p><strong><code>pip search package_name</code></strong>: Searches PyPI for packages matching the given name.</p></li>
<li><p><strong><code>pip show package_name</code></strong>: Displays information about a specific package.</p></li>
<li><p><strong><code>pip freeze</code></strong>: Generates a requirements.txt file containing a list of installed packages and their versions.</p></li>
</ul>
</section>
<section id="using-vscode-with-desired-environment" class="level3">
<h3 class="anchored" data-anchor-id="using-vscode-with-desired-environment">Using VSCode with Desired Environment</h3>
<p>VSCode has an integrated terminal that allows you to run commands directly within the editor. However, VSCode’s integrated terminal supports various shells, including PowerShell, Command Prompt (Windows), and Bash (macOS/Linux). So, while coding in VSCode, you need to make sure your code file is in the correct environment for your project. To do this, click on the bottom right of the screen on VSCode (in this example, the tab that says “3.11.3 (‘dlgtools’:conda). dlgtools is the name of my desired project environment. If the name of the environment is not the environment you want to work in, simply click on it and VSCode should open a tab at the top of your screen which says”Select Interpreter” and you can switch into a different environment. Your file will then be stored in this environment, so any packages or programs (like Python) which you plan to use in that file should be in that environment.</p>
<p><img src="https://www.srustillmblog.io/posts/command-line-skills/images/Screen Shot 2023-06-08 at 3.22.19 PM.png" class="img-fluid"></p>
</section>
<section id="checking-to-see-if-you-have-python" class="level3">
<h3 class="anchored" data-anchor-id="checking-to-see-if-you-have-python">Checking to See If You Have Python</h3>
<p>Once the terminal is open, type <strong><code>python --version</code></strong> or <strong><code>python3 --version</code></strong> and press Enter.</p>
<ul>
<li><p>If Python is installed, the command will display the version number of Python installed on your system. For example, you might see something like <strong><code>Python 3.9.2</code></strong>.</p></li>
<li><p>If Python is not installed or if the command is not recognized, you will typically see an error message indicating that the command is not found or recognized. In this case, you’ll need to install Python.</p></li>
</ul>
</section>
<section id="checking-your-vscode-in-terminal" class="level3">
<h3 class="anchored" data-anchor-id="checking-your-vscode-in-terminal">Checking Your VSCode in Terminal</h3>
<p>It is usually very difficult to see the output of your code in the integrated terminal of VSCode because it is kind of obscured among the lines about your system, device username, etc. To more clearly see the outputs of your code, you can do the following options:</p>
<ol type="1">
<li><strong>Check the code outputs directly in your device’s terminal.</strong></li>
</ol>
<ul>
<li><p>Open terminal.</p></li>
<li><p>Making sure you are in the desired environment (check the parenthesis), type the following, where file_name is the name of the VSCode file you want to check the code for:</p></li>
<li><p>from file_name import *</p></li>
<li><p>This should clearly produce all the outputs for your code</p></li>
</ul>
<ol start="2" type="1">
<li><p><strong>Copy-paste the code into Jupyter Notebook, Google Colab, or some other software with all the packages and tools built in and run the code.</strong></p></li>
<li><p><strong>Add the following line of code at the very top and very bottom of your coding file to create some space between the outputs within the integrated terminal of VSCode itself. This may not be as helpful to clearly see the code, but it may make a slight difference in visibility.</strong></p></li>
</ol>
<ul>
<li>print(“\n \n \n --------------- \n \n \n”)</li>
</ul>
</section>
</section>
<section id="file-navigation-in-terminal" class="level1">
<h1>File Navigation in Terminal</h1>
<p>Here are some basic commands in your device’s terminal to make sure you are storing all your files within the desired directory. A directory is basically a type of folder on your device. You need to know which directory you are putting your project files so that you do not lose any important files in the short or long-term.</p>
<p><img src="https://www.srustillmblog.io/posts/command-line-skills/images/Screen Shot 2023-06-07 at 2.00.19 PM.png" class="img-fluid"></p>
<section id="additional-navigation-commands-in-terminal" class="level3">
<h3 class="anchored" data-anchor-id="additional-navigation-commands-in-terminal">Additional Navigation Commands in Terminal:</h3>
<p>open . → opens the directory you are currently in</p>
<p>cd .. → goes to the parent directory (“steps back”)</p>
<p>ls -a → see all files within the directory (including hidden ones with .git)</p>
<p>cd \ → goes to the root directory of the hardware system (the furthest back root)</p>
<p>Basically, I would start by typing “pwd” in Terminal to determine which directory I am currently in. If you need to move back into an earlier parent folder/directory, type cd ..</p>
<p>If you want to move into a further directory, type cd directory_name.</p>
<p>If you do not know the name of the directory you want to move further into, or if you do not know if that directory is within your current working directory, type ls to see all directories/files within your current working directory.</p>
<p>ls-a shows all the hidden files as well. Hidden files are files which work in the background of your project, and will begin with a . , which as .git or .nojekyll.</p>
<p>After navigating into the root directory using cd \, and then going into the desired directory, you can type “echo $PATH” to get the path to get to that directory.</p>
</section>
</section>
<section id="githubgit-commands-in-terminal" class="level1">
<h1>Github/Git Commands in Terminal</h1>
<section id="cloning-on-github" class="level3">
<h3 class="anchored" data-anchor-id="cloning-on-github"><strong>Cloning on GitHub</strong></h3>
<p>Cloning refers to creating a local copy of an entire repository, including all its files, commit history, branches, and configuration. When you clone a repository, you create an identical copy on your local machine. This allows you to work with the project, make changes, commit them, and push them back to the remote repository. Cloning is typically used when you want to contribute to a project or work on your own project locally.</p>
<p><strong>To clone a repository from GitHub, follow these steps:</strong></p>
<ol type="1">
<li><p>Open the GitHub repository page in your web browser.</p></li>
<li><p>Click on the “Code” button, located near the top-right corner of the repository page.</p></li>
<li><p>Click on the clipboard icon to copy the repository’s URL. Alternatively, you can click on the “Download ZIP” button to download a compressed version of the repository instead of cloning it with Git.</p></li>
<li><p>Open your terminal or Git Bash (if you’re on Windows).</p></li>
<li><p>Navigate to the directory where you want to clone the repository. You can use the <strong><code>cd</code></strong> command to change directories.</p></li>
<li><p>Once you’re in the desired directory, use the following command to clone the repository:</p></li>
</ol>
<p>git clone &lt;paste_repository_URL&gt;</p>
</section>
<section id="after-making-changes-to-local-files-on-your-device-you-want-to-sync-those-changes-to-the-remote-master-directory-on-github.-git-is-a-tools-which-allows-this-syncing.-carry-out-the-following-steps-to-do-so" class="level3">
<h3 class="anchored" data-anchor-id="after-making-changes-to-local-files-on-your-device-you-want-to-sync-those-changes-to-the-remote-master-directory-on-github.-git-is-a-tools-which-allows-this-syncing.-carry-out-the-following-steps-to-do-so">After making changes to local files on your device, you want to sync those changes to the remote, master directory on Github. Git is a tools which allows this syncing. Carry out the following steps to do so:</h3>
<ol type="1">
<li><p>git add * → add your changes</p></li>
<li><p>git status → check you are adding the files/directories you want</p></li>
<li><p>git commit -m ‘message’ → add a message</p></li>
<li><p>git push → update the master directory with your work</p></li>
</ol>
</section>
<section id="another-option-pulling-in-github" class="level3">
<h3 class="anchored" data-anchor-id="another-option-pulling-in-github">Another option – “pulling” in Github:</h3>
<p>Pulling is the opposite of pushing: it’s what you do when the <strong>remote</strong>, master directory (maybe owned by someone other than you) has changes and you want to update your <strong>local</strong> directory with those changes. Typically used in collaborative files.</p>
<ul>
<li>git pull → update your local directory with the master (remote) directory</li>
</ul>
</section>
<section id="when-would-you-pull" class="level3">
<h3 class="anchored" data-anchor-id="when-would-you-pull">When would you pull?</h3>
<p>The `git pull` command is used to update your local repository with the latest changes from a remote repository, typically the one you cloned from. It incorporates changes made by others and brings your local copy up to date.</p>
<p>You would use `git pull` in a few different scenarios:</p>
<p>1. **Working on a shared project**: If you are collaborating with other people on a project, they might have made changes to the remote repository that you want to sync with. Running `git pull` will fetch those changes and merge them into your local branch.</p>
<p>2. **Staying up to date**: Even if you’re not collaborating with others, it’s good practice to regularly update your local repository with the latest changes from the remote repository. This ensures that you have the most recent version of the code and can avoid conflicts when you eventually push your own changes.</p>
<p>3. **Resolving conflicts**: Sometimes, when you pull changes from the remote repository, there might be <strong>conflicts</strong> between your local changes and the incoming changes. For example, if someone edited the same lines which you edited, and now there are different versions of the same file in the repo. In such cases, Git will notify you of the conflicts and provide an opportunity to resolve them manually.</p>
<p>It’s important to note that before running `git pull`, you should commit your local changes to avoid conflicts. If you have uncommitted changes, Git may ask you to stash or commit them before pulling.</p>
</section>
<section id="forking-in-github" class="level3">
<h3 class="anchored" data-anchor-id="forking-in-github">Forking in Github:</h3>
<p>Forking a file in GitHub is like making a personal copy of someone else’s file or project. When you fork a file, you create your own version of it that you can modify and make changes to without affecting the original file.</p>
<p>Here’s a simple analogy: Imagine you have a friend who has a really cool drawing. You want to add your own touches and modifications to that drawing, but you don’t want to mess up your friend’s original. So, what you do is make a photocopy of the drawing and work on that copy. This way, you can freely experiment and make changes without worrying about ruining the original.</p>
<p>In GitHub, forking is similar. If you find a file or project in someone else’s repository that you want to modify or contribute to, you can fork it to create your own personal copy of that repository. This copy will be stored in your GitHub account, and you can make changes without affecting the original file or the owner’s repository.</p>
<p>Once you’ve made the desired changes to your forked repository, you can choose to share those changes with the original owner through a process called a <strong>pull request</strong>. This allows the owner to review your changes and decide whether to incorporate them into the original file or project.</p>
</section>
<section id="how-to-fork-a-file-on-github" class="level3">
<h3 class="anchored" data-anchor-id="how-to-fork-a-file-on-github">How to fork a file on Github?</h3>
<p>To fork a repository in GitHub, including all its files, branches, and commit history, follow these steps:</p>
<ol type="1">
<li><p>Open your web browser and go to the GitHub repository page that contains the file you want to fork.</p></li>
<li><p>In the top-right corner of the repository page, click on the “Fork” button.</p></li>
<li><p>GitHub will prompt you to select where you want to fork the repository. Choose your user account or any organization you belong to. Click on the appropriate option.</p></li>
<li><p>GitHub will then create a copy of the repository under your account or organization. Once the forking process is complete, you will be redirected to the forked repository’s page.</p></li>
</ol>
<p>Now you have successfully forked the entire repository, not just an individual file. You will have a separate copy of the repository in your GitHub account. This copy will include all the files, branches, and commit history present in the original repository.</p>
<p>You can make changes to the files, add new features, fix bugs, or experiment with the forked repository as you see fit. You can commit and push changes to the forked repository without affecting the original repository</p>


</section>
</section>

 ]]></description>
  <category>blog</category>
  <guid>https://www.srustillmblog.io/posts/command-line-skills/index.html</guid>
  <pubDate>Thu, 08 Jun 2023 05:00:00 GMT</pubDate>
  <media:content url="https://help.apple.com/assets/63D8162D4F5E9E311D0CFA28/63D816334F5E9E311D0CFA30/en_US/d94aa1c4979b25e9ffbda97fcbae219a.png" medium="image" type="image/png"/>
</item>
<item>
  <title>The Biology to be Explored in LLMs</title>
  <dc:creator>Srusti Donapati</dc:creator>
  <link>https://www.srustillmblog.io/posts/post-with-code/index.html</link>
  <description><![CDATA[ 




<p>This post will be summarizing key points about molecular biology which I have learned from the article “Large Language Models in Molecular Biology” by Serafim Batzoglou.</p>
<p>In an attempt to further explore LLMs to prepare for my upcoming project regarding LLMs, the following summary of the biological information in the above article was generated by prompting ChatGPT and edited by me.</p>
<section id="cellular-and-molecular-biology-components" class="level1">
<h1><span style="color: white"><strong>Cellular and Molecular Biology Components</strong></span></h1>
<section id="central-dogma" class="level3">
<h3 class="anchored" data-anchor-id="central-dogma"><strong>Central Dogma</strong></h3>
<p>The central dogma of molecular biology explains how genetic information flows within living organisms. It states that DNA, which is housed in the nucleus of every cell, is the source of this genetic information. Human DNA consists of approximately 3 billion nucleotides organized into 23 chromosomes, with 22 being autosomes and one being a sex chromosome (X or Y). Each person inherits two nearly identical copies of the human genome, one from each parent. The genetic material from both parents is retained in the nucleus of each of the roughly 30 trillion cells in the human body. The genome contains about 20,000 genes responsible for protein synthesis, with only about 1% of the genome coding for proteins. The remaining portions of the genome include regions that control gene expression, regions within genes that do not code for proteins, regions contributing to DNA structure, and “junk” regions of self-replicating DNA.</p>
<p>Protein synthesis, a fundamental process in molecular biology, involves three main steps: transcription, splicing, and translation. During transcription, a DNA segment serving as a gene template is copied into messenger RNA (mRNA). The mRNA molecule undergoes splicing, where certain segments, called introns, are removed, and the remaining segments, called exons, are joined together to form mature mRNA. Splicing is crucial in higher organisms because it allows a single gene to produce multiple protein variants by assembling different combinations of exons. The mRNA is then transported to the ribosome, where translation occurs. During translation, the mRNA sequence is decoded into amino acids, which are the building blocks of proteins. These amino acids are linked together to form a protein sequence, which folds into a functional three-dimensional structure. Proteins play essential roles in various biological processes, providing structural components, catalyzing reactions as enzymes, and facilitating communication and transportation within cells.</p>
</section>
<section id="gene-regulation" class="level3">
<h3 class="anchored" data-anchor-id="gene-regulation"><span style="color: white"><strong>Gene Regulation</strong></span></h3>
<p>Gene regulation is a complex process that controls when, where, and in what quantity genes are expressed in cells. It ensures the timely production of the right proteins in appropriate amounts. Gene regulation occurs at different levels, involving chromatin structure, chemical modifications, and the action of transcription factors. <strong>Transcription factors</strong> are proteins that bind to specific DNA sequences and influence the recruitment of RNA polymerase, the enzyme responsible for mRNA synthesis. They help regulate the expression of target genes to ensure they are appropriately expressed in response to signals.</p>
<p>Promoters and enhancers are DNA regions that contribute to gene expression control, with promoters located adjacent to gene starts and enhancers situated within introns or between genes, further downstream in the DNA. Chromatin structure, formed by DNA wrapping around histone proteins, determines which DNA regions are accessible for gene expression. Chemical modifications of histones and DNA, such as acetylation, methylation, and DNA methylation, can influence chromatin structure and gene expression. Gene regulation is specific to each type of cell - some cells have certain genes expressed while other cells have different genes expressed. This is what allows cells to have specialized functions.</p>
<p>The flow of genetic information is traditionally described as unidirectional: DNA to RNA to protein. However, there are exceptions to this rule. Reverse transcription allows RNA to be converted back into DNA, as seen in retroviruses like HIV. DNA can also be transcribed into different types of RNA, such as transfer RNA (tRNA) and ribosomal RNA (rRNA), adding complexity to genetic information flow.</p>
</section>
<section id="epigenetic-mechanisms" class="level3">
<h3 class="anchored" data-anchor-id="epigenetic-mechanisms"><span style="color: white"><strong>Epigenetic Mechanisms</strong></span></h3>
<p>Epigenetic mechanisms, including DNA methylation and histone modifications, play a role in gene regulation and can be inherited. DNA methylation is a chemical modification where methyl is added to the DNA molecule, usually at specific cytosine bases. Methylation influences gene expression by affecting the binding of transcription factors and the chromatin structure. Chromatin must be unfolded for gene expression, so by making the chromatin more compact, methylation makes transcription more difficult (affects gene accessibility).</p>
<p>DNA variation contributes to the diversity and heritability of traits among individuals. DNA variants are introduced primarily through mutations between the genomes of parents and germline genomes passed on to offspring. Deleterious variants tend to be eliminated from the population over time through natural selection. Genetic variations common in humans are typically benign or contribute to diseases that manifest later in life. Some rare mutations can affect the splicing sites (the boundaries where genes are spliced). As a result, they can cause the production of a completely different protein sequence, thus different protein function. This is why they contribute to 10% of rare genetic diseases.</p>
<p>So, predicting splice sites and determining gene structure is important to diagnose genetic diseases.</p>


</section>
</section>

 ]]></description>
  <category>blog</category>
  <guid>https://www.srustillmblog.io/posts/post-with-code/index.html</guid>
  <pubDate>Tue, 06 Jun 2023 05:00:00 GMT</pubDate>
  <media:content url="https://wallpaperaccess.com/full/3020077.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Basics of LLMs and Their Role in the Field of Biology</title>
  <dc:creator>Srusti Donapati</dc:creator>
  <link>https://www.srustillmblog.io/posts/index.html</link>
  <description><![CDATA[ 




<section id="computational-components-llms" class="level1">
<h1><strong>Computational Components (LLMs)</strong></h1>
<section id="what-is-an-llm" class="level3">
<h3 class="anchored" data-anchor-id="what-is-an-llm"><span style="color: white"><strong>What is an LLM?</strong></span></h3>
<p>A Large Language Model is a type of neural network which uses vast amounts of textual data in order to generate text composed of human language. By identifying patterns and context within the text which is inputted, it is able to respond to questions, create new content, and even make predictions.</p>
</section>
<section id="what-are-the-different-types-of-llms" class="level3">
<h3 class="anchored" data-anchor-id="what-are-the-different-types-of-llms"><span style="color: white"><strong>What are the different types of LLMs?</strong></span></h3>
<ol type="1">
<li><p><strong>Word grams:</strong> These are rudimentary models that predict the next word based on the frequency of word pairs or word bags in the training data. They DO NOT consider context or word order, resulting in less coherent predictions. Text generated using word grams often lacks resemblance to human text.</p></li>
<li><p><strong>CNNs (Convolutional Neural Networks)</strong>: CNN models analyze text by considering relationships between adjacent words within a fixed window. They can have wide windows using techniques like dilation. While CNNs are good at identifying local patterns, they struggle with capturing long-range dependencies and comprehending complex sentence structures.</p></li>
<li><p><strong>LSTMs (Long Short-Term Memory networks):</strong> LSTMs are a variant of Recurrent Neural Networks (RNNs) capable of storing and processing information from earlier parts of a text. They outperform CNNs in understanding context and managing long-range dependencies. However, they still face challenges with complex sentences and long text.</p></li>
<li><p><strong>Attention Mechanisms:</strong> Attention mechanisms are not models in themselves, but mechanisms. They allow models to focus on relevant parts of the input when making predictions. These models have multiple attention “heads” that can concentrate on different parts of the previous text. Transformers, a class of language models, implement attention mechanisms.</p></li>
<li><p><strong>Large Language Models (LLMs):</strong> LLMs, such as GPT-3, are transformers trained on vast amounts of data. Their large size facilitates the learning of intricate patterns, relationships, and context within the text. LLMs represent the most advanced language models available and can generate accurate and coherent responses across a wide range of topics.<img src="https://www.srustillmblog.io/posts/https:/uploads-ssl.webflow.com/5b105a0c66f2f636c7884a17/64063dbcad97bd421b437096_chatgpt.jpg" class="img-fluid" width="500" alt="ChatGPT has revolutionized easy public access to the vast array of information on the internet. ChatGPT is an example of an LLM."></p></li>
</ol>
<p>The following LLMs use transformer architecture and were breakthroughs in the field:</p>
<ol type="1">
<li><p><strong>BERT (Bidirectional Encoder Representations from Transformers):</strong> BERT is a series of LLMs introduced by Google. It is trained using masked language modeling and next sentence prediction. BERT understands context from both the left and right sides of the input, making it <strong>bidirectional</strong>. It has been open-sourced and achieved significant advancements in language understanding.</p></li>
<li><p><strong>GPT (Generative Pretrained Transformer):</strong> GPT is a series of LLMs introduced by OpenAI. Unlike BERT, GPT is trained using the traditional language modeling task of autocompletion. It attends only to the left context during training, making it <strong>unidirectional</strong>. GPT excels in tasks involving text generation and has shown remarkable performance across various domains.</p></li>
</ol>
<p>These types of LLMs vary in their modeling capabilities, with LSTMs and transformers like BERT and GPT being more advanced in understanding context and generating coherent responses. LLMs have significantly evolved, and the latest generation, such as GPT-4, exhibits promising signs of general intelligence.</p>
</section>
<section id="what-about-data-generation-for-llms-for-use-in-genetics" class="level3">
<h3 class="anchored" data-anchor-id="what-about-data-generation-for-llms-for-use-in-genetics"><span style="color: white"><strong>What about Data Generation for LLMs for Use in Genetics?</strong></span></h3>
<p>Advances in DNA sequencing have allowed us to fully sequence the entire human genome for less than $200. Sequencing-based methods have significantly advanced our ability to measure molecular function. These methods allow for the exposure of crucial molecular information such as chromatin structure, histone modifications, and transcription factor binding to DNA. Short DNA segments with specific properties of interest are isolated and sequenced in experiments to obtain this information. The rapid progress in DNA sequencing technology has outpaced Moore’s law and enabled the measurement of various genetic aspects within biological samples, including gene expression, chromatin accessibility, and histone modifications, often with single-cell or spatial precision.</p>
</section>
<section id="using-llms-for-diagnosing-genetic-diseases" class="level3">
<h3 class="anchored" data-anchor-id="using-llms-for-diagnosing-genetic-diseases"><span style="color: white"><strong>Using LLMs for Diagnosing Genetic Diseases</strong></span></h3>
<p>As mentioned in an earlier post, mutations at splicing sites can completely change which proteins are produced, thus the protein function, resulting in rare genetic diseases. However, using LLMs, predicting splice sites and deducing gene structure becomes simpler and contribute to the diagnosis of rare genetic diseases.</p>
<p>SpliceAI is a deep residual Convolutional Neural Network (CNN) introduced by the Illumina AI laboratory. It operates by utilizing earlier techniques for language modeling applied to DNA sequences, rather than functioning as a Language Model itself. Its primary purpose is to accurately predict the locations of intron-exon boundaries in the human genome, specifically the donor and acceptor sites. SpliceAI achieved a high precision-recall area under the curve (PR-AUC) score of 0.98, surpassing the previous best score of 0.23.</p>
<p>One key feature of SpliceAI is its ability to perform in silico mutational analysis. It can artificially modify DNA positions and determine whether the alterations introduce or eliminate splice sites within 10,000 nucleotides of the mutation. This capability makes SpliceAI valuable for aiding genetic diagnosis, particularly in cases of rare undiagnosed pediatric diseases. By inputting variants of a patient’s DNA into SpliceAI, it can assess the likelihood of altering gene splicing and disrupting gene function. SpliceAI’s high accuracy stems from its deep residual network’s capacity to learn complex biomolecular properties of DNA sequences that guide the splicing machinery to the correct splice sites. It captures and utilizes these previously unknown or imprecisely known properties effectively.</p>
</section>
<section id="predicting-gene-expression-from-a-dna-sequence-using-llms" class="level3">
<h3 class="anchored" data-anchor-id="predicting-gene-expression-from-a-dna-sequence-using-llms"><span style="color: white"><strong>Predicting Gene Expression from a DNA Sequence Using LLMs</strong></span></h3>
<p><br>
Enformer is a transformer-based tool and a part of the lineage of language models designed to predict cell type-specific gene expression levels based on the DNA sequence near a gene. It is trained using supervised learning to predict various experimental data types for a given genome region, including chromatin status, histone modifications, transcription factor binding, and gene expression levels. By incorporating attention mechanisms, Enformer can effectively capture correlations between molecular entities across distant regions up to 100,000 nucleotides away.</p>
<p>While Enformer performs reasonably well in predicting gene expression from sequence alone, it currently falls short compared to experimental replicates, correlating at a level of 0.85, with a three-fold higher error rate. However, as more data are incorporated and the model is improved, its performance is expected to enhance. Enformer can also predict changes in gene expression caused by mutations in different individuals and artificially introduced mutations through CRISPR experiments. However, it has limitations in predicting the effects of distal enhancers and determining the direction of the impact of personal variants on gene expression, likely due to insufficient training data.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.srustillmblog.io/posts/https:/storrs.io/content/images/2022/03/Untitled-1-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Enformers for effective gene expression prediction. Credit: Erik Storrs blog.</figcaption>
</figure>
</div>
</section>
<section id="foundation-models" class="level3">
<h3 class="anchored" data-anchor-id="foundation-models"><span style="color: white"><strong>Foundation Models</strong></span></h3>
<p>Foundation models, such as the transformer-based GPT models, are large deep learning architectures that encode a vast amount of knowledge from various sources. They can be fine-tuned for specific tasks, resulting in high-performance systems for different applications. Two recent preprint models in molecular biology are introduced: scGPT and Nucleotide Transformer.</p>
<p>scGPT is designed for single-cell transcriptomics, chromatin accessibility, and protein abundance. It is trained on single-cell data from 10 million human cells and learns embeddings that provide insights into cellular states and biological pathways. The model is trained to generate data based on gene prompts and cell prompts, predicting genes and their confidence values. scGPT is then fine-tuned for tasks like batch correction, cell annotation, perturbation prediction, multiomics, and pathway prediction.</p>
<p>Nucleotide Transformer focuses on raw DNA sequences and uses the BERT methodology. It tokenizes sequences into k-mers of length 6 and is trained on the reference human genome, diverse human genomes, and genomes of other species. It is applied to 18 downstream tasks, including promoter prediction, splice site prediction, and histone modifications. Predictions are made through probing or computationally inexpensive fine-tuning.</p>
</section>
<section id="what-the-ai-actually-does-training-llms-in-predicting-gene-expression" class="level3">
<h3 class="anchored" data-anchor-id="what-the-ai-actually-does-training-llms-in-predicting-gene-expression"><span style="color: white"><strong>What the AI Actually Does: Training LLMs in Predicting Gene Expression</strong></span></h3>
<p>Teach it one-step causality relationships: “if a certain mutation occurs, a specific gene malfunctions. If this gene is under-expressed, other genes in the cascade increase or decrease” (Batzoglou). Ultimately, we want it to learn the complex statistical properties of existing biological systems. Batzoglou states that it can be “learned from triangulating between correlations across modalities such as DNA variation, protein abundance and phenotype (a technique known as Mendelian randomization)”.</p>
<p>In all, the deep learning technology is strong enough at this point to take in genomic data and output predictions for gene expression or other biological information. These technologies are continuously being developed, becoming even more powerful, efficient, and precise day-by-day.</p>


</section>
</section>

 ]]></description>
  <category>blog</category>
  <guid>https://www.srustillmblog.io/posts/index.html</guid>
  <pubDate>Tue, 06 Jun 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome To My ‘LLM in Biology’ Blog!</title>
  <dc:creator>Srusti Donapati</dc:creator>
  <link>https://www.srustillmblog.io/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>This is the introductory post about the blog!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.srustillmblog.io/posts/welcome/https:/miro.medium.com/v2/resize:fit:1024/0*neS1Be9611CzdqF2.png" class="img-fluid figure-img" width="400"></p>
<figcaption class="figure-caption">Credit: Serafim Batzoglou, “Large Language Models in Biology”. Image from the author, created by Midjourney, prompted by “DNA”.</figcaption>
</figure>
</div>
<p>This blog will ultimately track my progress in learning about Large Language Models (LLMs) and their applications in molecular biology throughout the course of my 8-week program in the Im Lab at the University of Chicago. As I continue to learn biological knowledge and computational skills, I will continue to update this blog with what I have learned.</p>



 ]]></description>
  <category>blog</category>
  <guid>https://www.srustillmblog.io/posts/welcome/index.html</guid>
  <pubDate>Tue, 06 Jun 2023 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
