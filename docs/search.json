[
  {
    "objectID": "posts/DNA-locus-extraction/index.html",
    "href": "posts/DNA-locus-extraction/index.html",
    "title": "How to Extract a DNA Sequence Centered at a Specific Locus",
    "section": "",
    "text": "Using a DNA sequence, researchers often want to predict something (e.g. gene expression, TF binding, histone modification, etc) at a specific locus (“location” on the genome) relevant to a particular trait or phenotype. For example, my project will be examining histone modifications at the 17q locus, which is the most significant locus for asthma (the part of the genome which is most influential, genetically, on the asthma condition). To accomplish this, it is important to know how extract from a full DNA sequence (which is 3 billion nucleotides long) the relevant locus.\nYou can use the following function to extract a DNA sequence at a specific locus center (in Python):\n\nclass FastaStringExtractor:\n    def __init__(self, fasta_file):\n        import pyfaidx\n        self.fasta = pyfaidx.Fasta(fasta_file)\n        self._chromosome_sizes = {k: len(v) for k, v in self.fasta.items()}\n    def extract(self, interval, **kwargs) -&gt; str:\n        # Truncate interval if it extends beyond the chromosome lengths.\n        import kipoiseq\n        chromosome_length = self._chromosome_sizes[interval.chrom]\n        trimmed_interval = kipoiseq.Interval(interval.chrom,\n                                    max(interval.start, 0),\n                                    min(interval.end, chromosome_length),\n                                    )\n        # pyfaidx wants a 1-based interval\n        sequence = str(self.fasta.get_seq(trimmed_interval.chrom,\n                                            trimmed_interval.start + 1,\n                                            trimmed_interval.stop).seq).upper()\n        # Fill truncated values with N's.\n        pad_upstream = 'N' * max(-interval.start, 0)\n        pad_downstream = 'N' * max(interval.end - chromosome_length, 0)\n        return pad_upstream + sequence + pad_downstream\n    def close(self):\n        return self.fasta.close()\n\nCredits for the function: Saideep Gona @ Im Lab at UChicago\nYou will need the pyfaidx and kipoiseq packages to use the function:\n\n!pip install pyfaidx \n!pip install kipoiseq==0.5.2\n\nTo use this function (after you have defined it), first create an instance of the FastaStringExtractor object, providing a fasta file you want to use. This fasta file is going to contain the full DNA sequence which you want to extract from:\n\nfasta_extractor_object = FastaStringExtractor(fasta_file)\n#you should have defined the path of your fasta file and assigned it to some variable before this\n\nNameError: name 'fasta_file' is not defined\n\n\nThen, create an interval you want to extract the sequence from using kipoiseq (“.resize” will resize the interval you provide to a length provided by “sequence_length”. The new interval will be centered on the “start”,“end” you provided originally):\n\ntarget_interval = kipoiseq.Interval(chrom,start,end).resize(sequence_length)\n\nNameError: name 'kipoiseq' is not defined\n\n\nThen, create an interval you want to extract the sequence from using kipoiseq (“.resize” will resize the interval you provide to a length provided by “sequence_length”. The new interval will be centered on the “start”,“end” you provided originally):\n\ntarget_interval = kipoiseq.Interval(chrom,start,end).resize(sequence_length)\n\nFinally, extract the sequence using the extractor object like this:\n\nextracted_sequence = fasta_extractor_object.extract(target_interval)\n\nThat’s it!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This blog is essentially a project of progress reports on biological knowledge and computational skills that I have acquired over my 8 weeks in the Im Lab during Summer 2023 for the GPT in Genomics Project."
  },
  {
    "objectID": "posts/practice_analysis/diabetes_analysis.html",
    "href": "posts/practice_analysis/diabetes_analysis.html",
    "title": "Linear Regression & Data Analysis Basics",
    "section": "",
    "text": "Resources for basic data analysis using python, and conducting a linear regression. Will be using a diabetes dataset.\nimport numpy as np  # library used for working with arrays\nimport pandas as pd # library used for data manipulation and analysis\n\nimport seaborn as sns # library for visualization\nimport matplotlib.pyplot as plt # library for visualization\n%matplotlib inline\n\n\n# to suppress warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n#read csv dataset\n\npima = pd.read_csv(\"diabetes.csv\") # load and reads the csv file\npima\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n3\n1\n89\n66\n23\n94\n28.1\n0.167\n21\n0\n\n\n4\n0\n137\n40\n35\n168\n43.1\n2.288\n33\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n763\n10\n101\n76\n48\n180\n32.9\n0.171\n63\n0\n\n\n764\n2\n122\n70\n27\n0\n36.8\n0.340\n27\n0\n\n\n765\n5\n121\n72\n23\n112\n26.2\n0.245\n30\n0\n\n\n766\n1\n126\n60\n0\n0\n30.1\n0.349\n47\n1\n\n\n767\n1\n93\n70\n31\n0\n30.4\n0.315\n23\n0\n\n\n\n\n768 rows × 9 columns\n# finds the number of columns in the dataset\ntotal_cols=len(pima.axes[1])\nprint(\"Number of Columns: \"+str(total_cols))\n\nNumber of Columns: 9\n#first 10 rows\npima.head(10)\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n3\n1\n89\n66\n23\n94\n28.1\n0.167\n21\n0\n\n\n4\n0\n137\n40\n35\n168\n43.1\n2.288\n33\n1\n\n\n5\n5\n116\n74\n0\n0\n25.6\n0.201\n30\n0\n\n\n6\n3\n78\n50\n32\n88\n31.0\n0.248\n26\n1\n\n\n7\n10\n115\n0\n0\n0\n35.3\n0.134\n29\n0\n\n\n8\n2\n197\n70\n45\n543\n30.5\n0.158\n53\n1\n\n\n9\n8\n125\n96\n0\n0\n0.0\n0.232\n54\n1\nOutcomes here represents whether someone has diabetes (1) or not (0).\n#number of rows in dataset\n\n# finds the number of rows in the dataset\ntotal_rows=len(pima.axes[0])\nprint(\"Number of Rows: \"+str(total_rows))\n\nNumber of Rows: 768\nprint('The dimension of the DataFrame is: ', pima.ndim)\n\nThe dimension of the DataFrame is:  2\n#size of the dataset (how many elements)\n\npima.size\n\n6912\n#The info() function is used to print a concise summary of a DataFrame.\n#This method prints information about a DataFrame including the index dtype and column dtypes, non-null values and memory usage.\n\npima.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 768 entries, 0 to 767\nData columns (total 9 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   Pregnancies               768 non-null    int64  \n 1   Glucose                   768 non-null    int64  \n 2   BloodPressure             768 non-null    int64  \n 3   SkinThickness             768 non-null    int64  \n 4   Insulin                   768 non-null    int64  \n 5   BMI                       768 non-null    float64\n 6   DiabetesPedigreeFunction  768 non-null    float64\n 7   Age                       768 non-null    int64  \n 8   Outcome                   768 non-null    int64  \ndtypes: float64(2), int64(7)\nmemory usage: 54.1 KB\n#functions that return a boolean value indicating whether the passed in argument value is in fact missing data.\n# this is an example of chaining methods\n\npima.isnull().values.any()\n\nFalse\n#it can also output if there is any missing values each of the columns\n\npima.isnull().any()\n\nPregnancies                 False\nGlucose                     False\nBloodPressure               False\nSkinThickness               False\nInsulin                     False\nBMI                         False\nDiabetesPedigreeFunction    False\nAge                         False\nOutcome                     False\ndtype: bool\nNow let’s do a summary of the statistics!\npima.iloc[:,8:]\n\n\n\n\n\n\n\n\nOutcome\n\n\n\n\n0\n1\n\n\n1\n0\n\n\n2\n1\n\n\n3\n0\n\n\n4\n1\n\n\n...\n...\n\n\n763\n0\n\n\n764\n0\n\n\n765\n0\n\n\n766\n1\n\n\n767\n0\n\n\n\n\n768 rows × 1 columns\n#excludes the outcome column \npima.iloc[:,0:8].describe()\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\n\n\n\n\ncount\n768.000000\n768.000000\n768.000000\n768.000000\n768.000000\n768.000000\n768.000000\n768.000000\n\n\nmean\n3.845052\n120.894531\n69.105469\n20.536458\n79.799479\n31.992578\n0.471876\n33.240885\n\n\nstd\n3.369578\n31.972618\n19.355807\n15.952218\n115.244002\n7.884160\n0.331329\n11.760232\n\n\nmin\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.078000\n21.000000\n\n\n25%\n1.000000\n99.000000\n62.000000\n0.000000\n0.000000\n27.300000\n0.243750\n24.000000\n\n\n50%\n3.000000\n117.000000\n72.000000\n23.000000\n30.500000\n32.000000\n0.372500\n29.000000\n\n\n75%\n6.000000\n140.250000\n80.000000\n32.000000\n127.250000\n36.600000\n0.626250\n41.000000\n\n\nmax\n17.000000\n199.000000\n122.000000\n99.000000\n846.000000\n67.100000\n2.420000\n81.000000\nSlay &lt;3\nFrom the results we can make out a few insights: The pregnancy numbers appear to be normally distributed whereas the others seem to be rightly skewed. (The mean and std deviation of pregnancies are more or less the same as opposed to the others). Highest glucose levels is 199, pregnancies 17 and BMI 67.\nNow to the fun part."
  },
  {
    "objectID": "posts/practice_analysis/diabetes_analysis.html#data-visualization",
    "href": "posts/practice_analysis/diabetes_analysis.html#data-visualization",
    "title": "Linear Regression & Data Analysis Basics",
    "section": "Data Visualization",
    "text": "Data Visualization\nPlotting a distribution plot for variable ‘Blood Pressure’.\ndisplot() function which is used to visualize a distribution of the univariate variable. This function uses matplotlib to plot a histogram and fit a kernel density estimate (KDE).\n\nsns.displot(pima['BloodPressure'], kind='kde') \nplt.show()\n\n\n\n\nWhat is the BMI of the person having the highest glucose?\nMax() method finds the highest value.\n\npima[pima['Glucose']==pima['Glucose'].max()]['BMI']\n\n661    42.9\nName: BMI, dtype: float64\n\n\nThe person with the highest glucose value (661) has a bmi of 42.9\nFinding Measures of Central Tendency (the mean,median, and mode) \n\n# mean \nm1 = pima['BMI'].mean() \nprint(m1) \n\n# median \nm2 = pima['BMI'].median() \nprint(m2)\n\n# mode  \nm3 = pima['BMI'].mode()[0] \nprint(m3)\n\n31.992578124999998\n32.0\n32.0\n\n\nStudying the correlation between glucose and insulin using a Scatter Plot.\nA scatter plot is a set of points plotted on horizontal and vertical axes. The scatter plot can be used to study the correlation between the two variables. One can also detect the extreme data points using a scatter plot.\n\nsns.scatterplot(x='Glucose',y='BloodPressure',data=pima)\nplt.show()\n\n\n\n\nNow, to do a linear regression.\nLinear regression is a statistical technique used to model the relationship between a dependent variable and one or more independent variables. It assumes a linear relationship between the variables, meaning that the change in the dependent variable is directly proportional to the change in the independent variable(s). The goal of linear regression is to find the best-fit line that minimizes the distance between the observed data points and the predicted values on the line. This line can then be used to make predictions or understand the impact of the independent variable(s) on the dependent variable.\nThus, linear regressions can only be done with numerical variables (for example, glucose levels or skin thickness).\n\nimport statsmodels.api as sm\n\nHere, we conduct a linear regression using glucose levels as the independent variable (x) and insulin as the dependent variable (y).\n\n\nX = pima['Glucose']\ny = pima['BloodPressure']\n\n# Add a constant column for the intercept term\nX = sm.add_constant(X)\n\n# Create and fit the linear regression model\nmodel = sm.OLS(y, X)\nresults = model.fit()\n\n# Print the summary of the regression results\nprint(results.summary())\n\n# Make predictions\ny_pred = results.predict(X)\n\n# Access the coefficients\nprint(\"Coefficients: \", results.params)\n\n# Plot the data points and the line of best fit\nplt.scatter(X['Glucose'], y, color='blue', label='Data Points')\nplt.plot(X['Glucose'], y_pred, color='red', label='Line of Best Fit')\nplt.xlabel('Glucose')\nplt.ylabel('Blood Pressure')\nplt.title('Linear Regression')\nplt.legend()\nplt.show()\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:          BloodPressure   R-squared:                       0.023\nModel:                            OLS   Adj. R-squared:                  0.022\nMethod:                 Least Squares   F-statistic:                     18.26\nDate:                Mon, 03 Jul 2023   Prob (F-statistic):           2.17e-05\nTime:                        16:05:01   Log-Likelihood:                -3355.8\nNo. Observations:                 768   AIC:                             6716.\nDf Residuals:                     766   BIC:                             6725.\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst         57.9377      2.703     21.433      0.000      52.631      63.244\nGlucose        0.0924      0.022      4.273      0.000       0.050       0.135\n==============================================================================\nOmnibus:                      318.039   Durbin-Watson:                   1.961\nProb(Omnibus):                  0.000   Jarque-Bera (JB):             1397.465\nSkew:                          -1.903   Prob(JB):                    3.50e-304\nKurtosis:                       8.403   Cond. No.                         489.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\nCoefficients:  const      57.937746\nGlucose     0.092376\ndtype: float64"
  },
  {
    "objectID": "posts/practice_analysis/diabetes_analysis.html#what-about-a-logistic-regression",
    "href": "posts/practice_analysis/diabetes_analysis.html#what-about-a-logistic-regression",
    "title": "Linear Regression & Data Analysis Basics",
    "section": "What about a logistic regression?",
    "text": "What about a logistic regression?\nUse a logistic regression when exploring For the diabetes dataset, you would use logistic regression because the values are binary (they are not just 0 and 1). More to come on this in a future blog post!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Large Language Models in Molecular Biology",
    "section": "",
    "text": "Linear Regression & Data Analysis Basics\n\n\n\n\n\n\n\nblog\n\n\n\n\n\n\n\n\n\n\n\nJul 10, 2023\n\n\nSrusti Donapati\n\n\n\n\n\n\n  \n\n\n\n\nHow to Extract a DNA Sequence Centered at a Specific Locus\n\n\n\n\n\n\n\nblog\n\n\n\n\n\n\n\n\n\n\n\nJul 10, 2023\n\n\nSrusti Donapati\n\n\n\n\n\n\n  \n\n\n\n\nNeural Networks Code and Explanation\n\n\n\n\n\n\n\nblog\n\n\n\n\n\n\n\n\n\n\n\nJun 28, 2023\n\n\nSrusti\n\n\n\n\n\n\n  \n\n\n\n\nGWAS Code\n\n\n\n\n\n\n\nblog\n\n\n\n\n\n\n\n\n\n\n\nJun 13, 2023\n\n\nSrusti Donapati\n\n\n\n\n\n\n  \n\n\n\n\nPracticing Working with Terminal\n\n\n\n\n\n\n\nblog\n\n\n\n\n\n\n\n\n\n\n\nJun 8, 2023\n\n\nSrusti Donapati\n\n\n\n\n\n\n  \n\n\n\n\nThe Biology to be Explored in LLMs\n\n\n\n\n\n\n\nblog\n\n\n\n\n\n\n\n\n\n\n\nJun 6, 2023\n\n\nSrusti Donapati\n\n\n\n\n\n\n  \n\n\n\n\nBasics of LLMs and Their Role in the Field of Biology\n\n\n\n\n\n\n\nblog\n\n\n\n\n\n\n\n\n\n\n\nJun 6, 2023\n\n\nSrusti Donapati\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My ‘LLM in Biology’ Blog!\n\n\n\n\n\n\n\nblog\n\n\n\n\n\n\n\n\n\n\n\nJun 6, 2023\n\n\nSrusti Donapati\n\n\n\n\n\n\nNo matching items"
  }
]