[
  {
    "objectID": "posts/DNA-locus-extraction/index.html",
    "href": "posts/DNA-locus-extraction/index.html",
    "title": "How to Extract a DNA Sequence Centered at a Specific Locus",
    "section": "",
    "text": "Using a DNA sequence, researchers often want to predict something (e.g. gene expression, TF binding, histone modification, etc) at a specific locus (“location” on the genome) relevant to a particular trait or phenotype. For example, my project will be examining histone modifications at the 17q locus, which is the most significant locus for asthma (the part of the genome which is most influential, genetically, on the asthma condition). To accomplish this, it is important to know how extract from a full DNA sequence (which is 3 billion nucleotides long) the relevant locus.\nYou can use the following function to extract a DNA sequence at a specific locus center (in Python):\n\nclass FastaStringExtractor:\n    def __init__(self, fasta_file):\n        import pyfaidx\n        self.fasta = pyfaidx.Fasta(fasta_file)\n        self._chromosome_sizes = {k: len(v) for k, v in self.fasta.items()}\n    def extract(self, interval, **kwargs) -&gt; str:\n        # Truncate interval if it extends beyond the chromosome lengths.\n        import kipoiseq\n        chromosome_length = self._chromosome_sizes[interval.chrom]\n        trimmed_interval = kipoiseq.Interval(interval.chrom,\n                                    max(interval.start, 0),\n                                    min(interval.end, chromosome_length),\n                                    )\n        # pyfaidx wants a 1-based interval\n        sequence = str(self.fasta.get_seq(trimmed_interval.chrom,\n                                            trimmed_interval.start + 1,\n                                            trimmed_interval.stop).seq).upper()\n        # Fill truncated values with N's.\n        pad_upstream = 'N' * max(-interval.start, 0)\n        pad_downstream = 'N' * max(interval.end - chromosome_length, 0)\n        return pad_upstream + sequence + pad_downstream\n    def close(self):\n        return self.fasta.close()\n\nCredits for the function: Saideep Gona @ Im Lab at UChicago\nYou will need the pyfaidx and kipoiseq packages to use the function:\n\n!pip install pyfaidx \n!pip install kipoiseq==0.5.2\n\nTo use this function (after you have defined it), first create an instance of the FastaStringExtractor object, providing a fasta file you want to use. This fasta file is going to contain the full DNA sequence which you want to extract from:\n\nfasta_extractor_object = FastaStringExtractor(fasta_file)\n\nNameError: name 'fasta_file' is not defined\n\n\nThen, create an interval you want to extract the sequence from using kipoiseq (“.resize” will resize the interval you provide to a length provided by “sequence_length”. The new interval will be centered on the “start”,“end” you provided originally):\n\ntarget_interval = kipoiseq.Interval(chrom,start,end).resize(sequence_length)\n\nNameError: name 'kipoiseq' is not defined\n\n\nThen, create an interval you want to extract the sequence from using kipoiseq (“.resize” will resize the interval you provide to a length provided by “sequence_length”. The new interval will be centered on the “start”,“end” you provided originally):\n\ntarget_interval = kipoiseq.Interval(chrom,start,end).resize(sequence_length)\n\nFinally, extract the sequence using the extractor object like this:\n\nextracted_sequence = fasta_extractor_object.extract(target_interval)\n\nThat’s it!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This blog is essentially a project of progress reports on biological knowledge and computational skills that I have acquired over my 8 weeks in the Im Lab during Summer 2023 for the GPT in Genomics Project."
  }
]